// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: education.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Capacity int32  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity"`
}

func (x *CreateRoomRequest) Reset() {
	*x = CreateRoomRequest{}
	mi := &file_education_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomRequest) ProtoMessage() {}

func (x *CreateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomRequest.ProtoReflect.Descriptor instead.
func (*CreateRoomRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRoomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRoomRequest) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type GetUpdateRoomAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms []*AbsRoom `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms"`
}

func (x *GetUpdateRoomAbs) Reset() {
	*x = GetUpdateRoomAbs{}
	mi := &file_education_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateRoomAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateRoomAbs) ProtoMessage() {}

func (x *GetUpdateRoomAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateRoomAbs.ProtoReflect.Descriptor instead.
func (*GetUpdateRoomAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{1}
}

func (x *GetUpdateRoomAbs) GetRooms() []*AbsRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type AbsRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Capacity int32  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
}

func (x *AbsRoom) Reset() {
	*x = AbsRoom{}
	mi := &file_education_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsRoom) ProtoMessage() {}

func (x *AbsRoom) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsRoom.ProtoReflect.Descriptor instead.
func (*AbsRoom) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{2}
}

func (x *AbsRoom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsRoom) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *AbsRoom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	LessonDuration int32   `protobuf:"varint,2,opt,name=lessonDuration,proto3" json:"lessonDuration"`
	CourseDuration int32   `protobuf:"varint,3,opt,name=courseDuration,proto3" json:"courseDuration"`
	Price          float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
}

func (x *CreateCourseRequest) Reset() {
	*x = CreateCourseRequest{}
	mi := &file_education_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseRequest) ProtoMessage() {}

func (x *CreateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseRequest.ProtoReflect.Descriptor instead.
func (*CreateCourseRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCourseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCourseRequest) GetLessonDuration() int32 {
	if x != nil {
		return x.LessonDuration
	}
	return 0
}

func (x *CreateCourseRequest) GetCourseDuration() int32 {
	if x != nil {
		return x.CourseDuration
	}
	return 0
}

func (x *CreateCourseRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateCourseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetUpdateCourseAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courses []*AbsCourse `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses"`
}

func (x *GetUpdateCourseAbs) Reset() {
	*x = GetUpdateCourseAbs{}
	mi := &file_education_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateCourseAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateCourseAbs) ProtoMessage() {}

func (x *GetUpdateCourseAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateCourseAbs.ProtoReflect.Descriptor instead.
func (*GetUpdateCourseAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{4}
}

func (x *GetUpdateCourseAbs) GetCourses() []*AbsCourse {
	if x != nil {
		return x.Courses
	}
	return nil
}

type AbsCourse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,6,opt,name=id,proto3" json:"id"`
	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	LessonDuration int32   `protobuf:"varint,2,opt,name=lessonDuration,proto3" json:"lessonDuration"`
	CourseDuration int32   `protobuf:"varint,3,opt,name=courseDuration,proto3" json:"courseDuration"`
	Price          float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
}

func (x *AbsCourse) Reset() {
	*x = AbsCourse{}
	mi := &file_education_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsCourse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsCourse) ProtoMessage() {}

func (x *AbsCourse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsCourse.ProtoReflect.Descriptor instead.
func (*AbsCourse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{5}
}

func (x *AbsCourse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsCourse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsCourse) GetLessonDuration() int32 {
	if x != nil {
		return x.LessonDuration
	}
	return 0
}

func (x *AbsCourse) GetCourseDuration() int32 {
	if x != nil {
		return x.CourseDuration
	}
	return 0
}

func (x *AbsCourse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AbsCourse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetCourseByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id"`
	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	LessonDuration int32   `protobuf:"varint,2,opt,name=lessonDuration,proto3" json:"lessonDuration"`
	CourseDuration int32   `protobuf:"varint,3,opt,name=courseDuration,proto3" json:"courseDuration"`
	Price          float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	StudentCount   int32   `protobuf:"varint,6,opt,name=studentCount,proto3" json:"studentCount"`
}

func (x *GetCourseByIdResponse) Reset() {
	*x = GetCourseByIdResponse{}
	mi := &file_education_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseByIdResponse) ProtoMessage() {}

func (x *GetCourseByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseByIdResponse.ProtoReflect.Descriptor instead.
func (*GetCourseByIdResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{6}
}

func (x *GetCourseByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCourseByIdResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCourseByIdResponse) GetLessonDuration() int32 {
	if x != nil {
		return x.LessonDuration
	}
	return 0
}

func (x *GetCourseByIdResponse) GetCourseDuration() int32 {
	if x != nil {
		return x.CourseDuration
	}
	return 0
}

func (x *GetCourseByIdResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetCourseByIdResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCourseByIdResponse) GetStudentCount() int32 {
	if x != nil {
		return x.StudentCount
	}
	return 0
}

type GetCourseByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetCourseByIdRequest) Reset() {
	*x = GetCourseByIdRequest{}
	mi := &file_education_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseByIdRequest) ProtoMessage() {}

func (x *GetCourseByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCourseByIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{7}
}

func (x *GetCourseByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGroupsByTeacherIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeacherId  string `protobuf:"bytes,1,opt,name=teacherId,proto3" json:"teacherId"`
	IsArchived bool   `protobuf:"varint,2,opt,name=isArchived,proto3" json:"isArchived"`
}

func (x *GetGroupsByTeacherIdRequest) Reset() {
	*x = GetGroupsByTeacherIdRequest{}
	mi := &file_education_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByTeacherIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByTeacherIdRequest) ProtoMessage() {}

func (x *GetGroupsByTeacherIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByTeacherIdRequest.ProtoReflect.Descriptor instead.
func (*GetGroupsByTeacherIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{8}
}

func (x *GetGroupsByTeacherIdRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *GetGroupsByTeacherIdRequest) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

type GetGroupsByTeacherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GetGroupByTeacherAbs `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups"`
}

func (x *GetGroupsByTeacherResponse) Reset() {
	*x = GetGroupsByTeacherResponse{}
	mi := &file_education_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByTeacherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByTeacherResponse) ProtoMessage() {}

func (x *GetGroupsByTeacherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByTeacherResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsByTeacherResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{9}
}

func (x *GetGroupsByTeacherResponse) GetGroups() []*GetGroupByTeacherAbs {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetGroupByTeacherAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string        `protobuf:"bytes,10,opt,name=id,proto3" json:"id"`
	Name               string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	CourseName         string        `protobuf:"bytes,2,opt,name=courseName,proto3" json:"courseName"`
	RoomName           string        `protobuf:"bytes,3,opt,name=roomName,proto3" json:"roomName"`
	LessonStartTime    string        `protobuf:"bytes,4,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	DayType            string        `protobuf:"bytes,5,opt,name=dayType,proto3" json:"dayType"`
	GroupStartAt       string        `protobuf:"bytes,6,opt,name=groupStartAt,proto3" json:"groupStartAt"`
	GroupEndAt         string        `protobuf:"bytes,7,opt,name=groupEndAt,proto3" json:"groupEndAt"`
	ActiveStudentCount int32         `protobuf:"varint,8,opt,name=activeStudentCount,proto3" json:"activeStudentCount"`
	Students           []*AbsStudent `protobuf:"bytes,9,rep,name=students,proto3" json:"students"`
}

func (x *GetGroupByTeacherAbs) Reset() {
	*x = GetGroupByTeacherAbs{}
	mi := &file_education_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupByTeacherAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByTeacherAbs) ProtoMessage() {}

func (x *GetGroupByTeacherAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByTeacherAbs.ProtoReflect.Descriptor instead.
func (*GetGroupByTeacherAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{10}
}

func (x *GetGroupByTeacherAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetDayType() string {
	if x != nil {
		return x.DayType
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetGroupStartAt() string {
	if x != nil {
		return x.GroupStartAt
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetGroupEndAt() string {
	if x != nil {
		return x.GroupEndAt
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetActiveStudentCount() int32 {
	if x != nil {
		return x.ActiveStudentCount
	}
	return 0
}

func (x *GetGroupByTeacherAbs) GetStudents() []*AbsStudent {
	if x != nil {
		return x.Students
	}
	return nil
}

type CreateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	CourseId        int32    `protobuf:"varint,2,opt,name=courseId,proto3" json:"courseId"`
	TeacherId       string   `protobuf:"bytes,3,opt,name=teacherId,proto3" json:"teacherId"`
	Type            string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	Days            []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days"`
	RoomId          int32    `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId"`
	LessonStartTime string   `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	GroupStartDate  string   `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate"`
	GroupEndDate    string   `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate"`
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	mi := &file_education_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{11}
}

func (x *CreateGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupRequest) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CreateGroupRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *CreateGroupRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateGroupRequest) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *CreateGroupRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CreateGroupRequest) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *CreateGroupRequest) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *CreateGroupRequest) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

type GetGroupByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetGroupByIdRequest) Reset() {
	*x = GetGroupByIdRequest{}
	mi := &file_education_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByIdRequest) ProtoMessage() {}

func (x *GetGroupByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByIdRequest.ProtoReflect.Descriptor instead.
func (*GetGroupByIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{12}
}

func (x *GetGroupByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUpdateGroupAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,10,opt,name=id,proto3" json:"id"`
	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	CourseId        int32    `protobuf:"varint,2,opt,name=courseId,proto3" json:"courseId"`
	TeacherId       string   `protobuf:"bytes,3,opt,name=teacherId,proto3" json:"teacherId"`
	Type            string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	Days            []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days"`
	RoomId          int32    `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId"`
	LessonStartTime string   `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	GroupStartDate  string   `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate"`
	GroupEndDate    string   `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate"`
}

func (x *GetUpdateGroupAbs) Reset() {
	*x = GetUpdateGroupAbs{}
	mi := &file_education_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateGroupAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateGroupAbs) ProtoMessage() {}

func (x *GetUpdateGroupAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateGroupAbs.ProtoReflect.Descriptor instead.
func (*GetUpdateGroupAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{13}
}

func (x *GetUpdateGroupAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *GetUpdateGroupAbs) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetUpdateGroupAbs) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetUpdateGroupAbs) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

type GetGroupsByCourseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GetGroupByCourseAbsResponse `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups"`
}

func (x *GetGroupsByCourseResponse) Reset() {
	*x = GetGroupsByCourseResponse{}
	mi := &file_education_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByCourseResponse) ProtoMessage() {}

func (x *GetGroupsByCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByCourseResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsByCourseResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{14}
}

func (x *GetGroupsByCourseResponse) GetGroups() []*GetGroupByCourseAbsResponse {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetGroupByCourseAbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	TeacherName     string `protobuf:"bytes,2,opt,name=teacherName,proto3" json:"teacherName"`
	GroupStartDate  string `protobuf:"bytes,3,opt,name=groupStartDate,proto3" json:"groupStartDate"`
	GroupEndDate    string `protobuf:"bytes,4,opt,name=groupEndDate,proto3" json:"groupEndDate"`
	DateType        string `protobuf:"bytes,5,opt,name=dateType,proto3" json:"dateType"`
	LessonStartTime string `protobuf:"bytes,6,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	GroupName       string `protobuf:"bytes,7,opt,name=groupName,proto3" json:"groupName"`
}

func (x *GetGroupByCourseAbsResponse) Reset() {
	*x = GetGroupByCourseAbsResponse{}
	mi := &file_education_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupByCourseAbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByCourseAbsResponse) ProtoMessage() {}

func (x *GetGroupByCourseAbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByCourseAbsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupByCourseAbsResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{15}
}

func (x *GetGroupByCourseAbsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type GetGroupAbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Course          *AbsCourse `protobuf:"bytes,2,opt,name=course,proto3" json:"course"`
	TeacherName     string     `protobuf:"bytes,3,opt,name=teacherName,proto3" json:"teacherName"`
	TeacherId       string     `protobuf:"bytes,14,opt,name=teacherId,proto3" json:"teacherId"`
	LessonStartTime string     `protobuf:"bytes,4,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	Room            *AbsRoom   `protobuf:"bytes,5,opt,name=room,proto3" json:"room"`
	StudentCount    int32      `protobuf:"varint,6,opt,name=studentCount,proto3" json:"studentCount"`
	Name            string     `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	IsArchived      bool       `protobuf:"varint,8,opt,name=isArchived,proto3" json:"isArchived"`
	CreatedAt       string     `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt"`
	StartDate       string     `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate"`
	EndDate         string     `protobuf:"bytes,11,opt,name=endDate,proto3" json:"endDate"`
	Days            []string   `protobuf:"bytes,12,rep,name=days,proto3" json:"days"`
	DateType        string     `protobuf:"bytes,13,opt,name=dateType,proto3" json:"dateType"`
}

func (x *GetGroupAbsResponse) Reset() {
	*x = GetGroupAbsResponse{}
	mi := &file_education_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupAbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupAbsResponse) ProtoMessage() {}

func (x *GetGroupAbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupAbsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupAbsResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{16}
}

func (x *GetGroupAbsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupAbsResponse) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *GetGroupAbsResponse) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetGroupAbsResponse) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *GetGroupAbsResponse) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupAbsResponse) GetRoom() *AbsRoom {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetGroupAbsResponse) GetStudentCount() int32 {
	if x != nil {
		return x.StudentCount
	}
	return 0
}

func (x *GetGroupAbsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupAbsResponse) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetGroupAbsResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetGroupAbsResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetGroupAbsResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetGroupAbsResponse) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetGroupAbsResponse) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

type GetGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups         []*GetGroupAbsResponse `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups"`
	TotalPageCount int32                  `protobuf:"varint,2,opt,name=totalPageCount,proto3" json:"totalPageCount"`
}

func (x *GetGroupsResponse) Reset() {
	*x = GetGroupsResponse{}
	mi := &file_education_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsResponse) ProtoMessage() {}

func (x *GetGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{17}
}

func (x *GetGroupsResponse) GetGroups() []*GetGroupAbsResponse {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetGroupsResponse) GetTotalPageCount() int32 {
	if x != nil {
		return x.TotalPageCount
	}
	return 0
}

type GetGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsArchived bool         `protobuf:"varint,1,opt,name=isArchived,proto3" json:"isArchived"`
	Page       *PageRequest `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
}

func (x *GetGroupsRequest) Reset() {
	*x = GetGroupsRequest{}
	mi := &file_education_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsRequest) ProtoMessage() {}

func (x *GetGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupsRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{18}
}

func (x *GetGroupsRequest) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetGroupsRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type GetAttendanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId"`
	From         string `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	Till         string `protobuf:"bytes,3,opt,name=till,proto3" json:"till"`
	WithOutdated bool   `protobuf:"varint,4,opt,name=withOutdated,proto3" json:"withOutdated"`
}

func (x *GetAttendanceRequest) Reset() {
	*x = GetAttendanceRequest{}
	mi := &file_education_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttendanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttendanceRequest) ProtoMessage() {}

func (x *GetAttendanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttendanceRequest.ProtoReflect.Descriptor instead.
func (*GetAttendanceRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{19}
}

func (x *GetAttendanceRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetAttendanceRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetAttendanceRequest) GetTill() string {
	if x != nil {
		return x.Till
	}
	return ""
}

func (x *GetAttendanceRequest) GetWithOutdated() bool {
	if x != nil {
		return x.WithOutdated
	}
	return false
}

type GetAttendanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days     []*Day     `protobuf:"bytes,1,rep,name=days,proto3" json:"days"`
	Students []*Student `protobuf:"bytes,2,rep,name=students,proto3" json:"students"`
}

func (x *GetAttendanceResponse) Reset() {
	*x = GetAttendanceResponse{}
	mi := &file_education_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttendanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttendanceResponse) ProtoMessage() {}

func (x *GetAttendanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttendanceResponse.ProtoReflect.Descriptor instead.
func (*GetAttendanceResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{20}
}

func (x *GetAttendanceResponse) GetDays() []*Day {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetAttendanceResponse) GetStudents() []*Student {
	if x != nil {
		return x.Students
	}
	return nil
}

type Day struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         string `protobuf:"bytes,1,opt,name=date,proto3" json:"date"`
	TransferDate string `protobuf:"bytes,2,opt,name=transferDate,proto3" json:"transferDate"`
}

func (x *Day) Reset() {
	*x = Day{}
	mi := &file_education_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Day) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Day) ProtoMessage() {}

func (x *Day) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Day.ProtoReflect.Descriptor instead.
func (*Day) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{21}
}

func (x *Day) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Day) GetTransferDate() string {
	if x != nil {
		return x.TransferDate
	}
	return ""
}

type Student struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,9,opt,name=id,proto3" json:"id"`
	ActivatedAt  string        `protobuf:"bytes,1,opt,name=activatedAt,proto3" json:"activatedAt"`
	AddedAt      string        `protobuf:"bytes,2,opt,name=addedAt,proto3" json:"addedAt"`
	Attendance   []*Attendance `protobuf:"bytes,3,rep,name=attendance,proto3" json:"attendance"`
	Balance      float64       `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance"`
	CreatedAt    string        `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt"`
	DateOfBirth  string        `protobuf:"bytes,6,opt,name=dateOfBirth,proto3" json:"dateOfBirth"`
	FreezeDetail *FreezeDetail `protobuf:"bytes,7,opt,name=freezeDetail,proto3" json:"freezeDetail"`
	Gender       bool          `protobuf:"varint,8,opt,name=gender,proto3" json:"gender"`
	Condition    string        `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition"`
	Name         string        `protobuf:"bytes,11,opt,name=name,proto3" json:"name"`
	Phone        string        `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone"`
}

func (x *Student) Reset() {
	*x = Student{}
	mi := &file_education_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Student) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Student) ProtoMessage() {}

func (x *Student) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Student.ProtoReflect.Descriptor instead.
func (*Student) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{22}
}

func (x *Student) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Student) GetActivatedAt() string {
	if x != nil {
		return x.ActivatedAt
	}
	return ""
}

func (x *Student) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

func (x *Student) GetAttendance() []*Attendance {
	if x != nil {
		return x.Attendance
	}
	return nil
}

func (x *Student) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Student) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Student) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *Student) GetFreezeDetail() *FreezeDetail {
	if x != nil {
		return x.FreezeDetail
	}
	return nil
}

func (x *Student) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *Student) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Student) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Student) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type Attendance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AttendDate string `protobuf:"bytes,2,opt,name=attend_date,json=attendDate,proto3" json:"attend_date"`
	IsCome     bool   `protobuf:"varint,3,opt,name=isCome,proto3" json:"isCome"`
	StudentId  string `protobuf:"bytes,4,opt,name=studentId,proto3" json:"studentId"`
	TeacherId  string `protobuf:"bytes,5,opt,name=teacherId,proto3" json:"teacherId"`
}

func (x *Attendance) Reset() {
	*x = Attendance{}
	mi := &file_education_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attendance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attendance) ProtoMessage() {}

func (x *Attendance) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attendance.ProtoReflect.Descriptor instead.
func (*Attendance) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{23}
}

func (x *Attendance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attendance) GetAttendDate() string {
	if x != nil {
		return x.AttendDate
	}
	return ""
}

func (x *Attendance) GetIsCome() bool {
	if x != nil {
		return x.IsCome
	}
	return false
}

func (x *Attendance) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *Attendance) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

type FreezeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason   string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason"`
	TillDate string `protobuf:"bytes,2,opt,name=till_date,json=tillDate,proto3" json:"till_date"`
}

func (x *FreezeDetail) Reset() {
	*x = FreezeDetail{}
	mi := &file_education_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreezeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeDetail) ProtoMessage() {}

func (x *FreezeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeDetail.ProtoReflect.Descriptor instead.
func (*FreezeDetail) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{24}
}

func (x *FreezeDetail) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FreezeDetail) GetTillDate() string {
	if x != nil {
		return x.TillDate
	}
	return ""
}

type SetAttendanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttendDate string `protobuf:"bytes,1,opt,name=attendDate,proto3" json:"attendDate"`
	GroupId    string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	Status     int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
	StudentId  string `protobuf:"bytes,4,opt,name=studentId,proto3" json:"studentId"`
	TeacherId  string `protobuf:"bytes,5,opt,name=teacherId,proto3" json:"teacherId"`
}

func (x *SetAttendanceRequest) Reset() {
	*x = SetAttendanceRequest{}
	mi := &file_education_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAttendanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAttendanceRequest) ProtoMessage() {}

func (x *SetAttendanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAttendanceRequest.ProtoReflect.Descriptor instead.
func (*SetAttendanceRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{25}
}

func (x *SetAttendanceRequest) GetAttendDate() string {
	if x != nil {
		return x.AttendDate
	}
	return ""
}

func (x *SetAttendanceRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SetAttendanceRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetAttendanceRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *SetAttendanceRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

type DeleteStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId   string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId"`
	ReturnMoney bool   `protobuf:"varint,2,opt,name=returnMoney,proto3" json:"returnMoney"`
}

func (x *DeleteStudentRequest) Reset() {
	*x = DeleteStudentRequest{}
	mi := &file_education_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStudentRequest) ProtoMessage() {}

func (x *DeleteStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStudentRequest.ProtoReflect.Descriptor instead.
func (*DeleteStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *DeleteStudentRequest) GetReturnMoney() bool {
	if x != nil {
		return x.ReturnMoney
	}
	return false
}

type ChangeConditionStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId      string `protobuf:"bytes,4,opt,name=studentId,proto3" json:"studentId"`
	GroupId        string `protobuf:"bytes,5,opt,name=groupId,proto3" json:"groupId"`
	Status         string `protobuf:"bytes,1,opt,name=status,proto3" json:"status"`
	ReturnTheMoney bool   `protobuf:"varint,2,opt,name=returnTheMoney,proto3" json:"returnTheMoney"`
	TillDate       string `protobuf:"bytes,3,opt,name=tillDate,proto3" json:"tillDate"`
}

func (x *ChangeConditionStudentRequest) Reset() {
	*x = ChangeConditionStudentRequest{}
	mi := &file_education_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConditionStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConditionStudentRequest) ProtoMessage() {}

func (x *ChangeConditionStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConditionStudentRequest.ProtoReflect.Descriptor instead.
func (*ChangeConditionStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{27}
}

func (x *ChangeConditionStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetReturnTheMoney() bool {
	if x != nil {
		return x.ReturnTheMoney
	}
	return false
}

func (x *ChangeConditionStudentRequest) GetTillDate() string {
	if x != nil {
		return x.TillDate
	}
	return ""
}

type TransferLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from"`
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to"`
	GroupId string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId"`
}

func (x *TransferLessonRequest) Reset() {
	*x = TransferLessonRequest{}
	mi := &file_education_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLessonRequest) ProtoMessage() {}

func (x *TransferLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLessonRequest.ProtoReflect.Descriptor instead.
func (*TransferLessonRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{28}
}

func (x *TransferLessonRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferLessonRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferLessonRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetHistoryGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupHistory    []*AbsHistory        `protobuf:"bytes,1,rep,name=groupHistory,proto3" json:"groupHistory"`
	StudentsHistory []*AbsStudentHistory `protobuf:"bytes,2,rep,name=studentsHistory,proto3" json:"studentsHistory"`
}

func (x *GetHistoryGroupResponse) Reset() {
	*x = GetHistoryGroupResponse{}
	mi := &file_education_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryGroupResponse) ProtoMessage() {}

func (x *GetHistoryGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryGroupResponse.ProtoReflect.Descriptor instead.
func (*GetHistoryGroupResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{29}
}

func (x *GetHistoryGroupResponse) GetGroupHistory() []*AbsHistory {
	if x != nil {
		return x.GroupHistory
	}
	return nil
}

func (x *GetHistoryGroupResponse) GetStudentsHistory() []*AbsStudentHistory {
	if x != nil {
		return x.StudentsHistory
	}
	return nil
}

type GetHistoryStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentHistory    []*AbsHistory        `protobuf:"bytes,1,rep,name=studentHistory,proto3" json:"studentHistory"`
	ConditionsHistory []*AbsStudentHistory `protobuf:"bytes,2,rep,name=conditionsHistory,proto3" json:"conditionsHistory"`
}

func (x *GetHistoryStudentResponse) Reset() {
	*x = GetHistoryStudentResponse{}
	mi := &file_education_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryStudentResponse) ProtoMessage() {}

func (x *GetHistoryStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryStudentResponse.ProtoReflect.Descriptor instead.
func (*GetHistoryStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{30}
}

func (x *GetHistoryStudentResponse) GetStudentHistory() []*AbsHistory {
	if x != nil {
		return x.StudentHistory
	}
	return nil
}

func (x *GetHistoryStudentResponse) GetConditionsHistory() []*AbsStudentHistory {
	if x != nil {
		return x.ConditionsHistory
	}
	return nil
}

type AbsStudentHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Student          *AbsStudent `protobuf:"bytes,1,opt,name=student,proto3" json:"student"`
	Group            *AbsGroup   `protobuf:"bytes,2,opt,name=group,proto3" json:"group"`
	OldCondition     string      `protobuf:"bytes,3,opt,name=oldCondition,proto3" json:"oldCondition"`
	CurrentCondition string      `protobuf:"bytes,6,opt,name=currentCondition,proto3" json:"currentCondition"`
	SpecificDate     string      `protobuf:"bytes,4,opt,name=specificDate,proto3" json:"specificDate"`
	CreatedAt        string      `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *AbsStudentHistory) Reset() {
	*x = AbsStudentHistory{}
	mi := &file_education_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsStudentHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsStudentHistory) ProtoMessage() {}

func (x *AbsStudentHistory) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsStudentHistory.ProtoReflect.Descriptor instead.
func (*AbsStudentHistory) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{31}
}

func (x *AbsStudentHistory) GetStudent() *AbsStudent {
	if x != nil {
		return x.Student
	}
	return nil
}

func (x *AbsStudentHistory) GetGroup() *AbsGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AbsStudentHistory) GetOldCondition() string {
	if x != nil {
		return x.OldCondition
	}
	return ""
}

func (x *AbsStudentHistory) GetCurrentCondition() string {
	if x != nil {
		return x.CurrentCondition
	}
	return ""
}

func (x *AbsStudentHistory) GetSpecificDate() string {
	if x != nil {
		return x.SpecificDate
	}
	return ""
}

func (x *AbsStudentHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type AbsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name               string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	TeacherName        string     `protobuf:"bytes,3,opt,name=teacherName,proto3" json:"teacherName"`
	CurrentGroupStatus string     `protobuf:"bytes,4,opt,name=currentGroupStatus,proto3" json:"currentGroupStatus"`
	GroupStartDate     string     `protobuf:"bytes,5,opt,name=groupStartDate,proto3" json:"groupStartDate"`
	GroupEndDate       string     `protobuf:"bytes,6,opt,name=groupEndDate,proto3" json:"groupEndDate"`
	LessonStartTime    string     `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	DateType           string     `protobuf:"bytes,8,opt,name=dateType,proto3" json:"dateType"`
	Course             *AbsCourse `protobuf:"bytes,9,opt,name=course,proto3" json:"course"`
	IsArchived         bool       `protobuf:"varint,10,opt,name=isArchived,proto3" json:"isArchived"`
}

func (x *AbsGroup) Reset() {
	*x = AbsGroup{}
	mi := &file_education_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsGroup) ProtoMessage() {}

func (x *AbsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsGroup.ProtoReflect.Descriptor instead.
func (*AbsGroup) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{32}
}

func (x *AbsGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsGroup) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *AbsGroup) GetCurrentGroupStatus() string {
	if x != nil {
		return x.CurrentGroupStatus
	}
	return ""
}

func (x *AbsGroup) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *AbsGroup) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *AbsGroup) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *AbsGroup) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

func (x *AbsGroup) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *AbsGroup) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

type AbsHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	EditedField  string `protobuf:"bytes,2,opt,name=editedField,proto3" json:"editedField"`
	OldValue     string `protobuf:"bytes,3,opt,name=oldValue,proto3" json:"oldValue"`
	CurrentValue string `protobuf:"bytes,4,opt,name=currentValue,proto3" json:"currentValue"`
}

func (x *AbsHistory) Reset() {
	*x = AbsHistory{}
	mi := &file_education_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsHistory) ProtoMessage() {}

func (x *AbsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsHistory.ProtoReflect.Descriptor instead.
func (*AbsHistory) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{33}
}

func (x *AbsHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsHistory) GetEditedField() string {
	if x != nil {
		return x.EditedField
	}
	return ""
}

func (x *AbsHistory) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *AbsHistory) GetCurrentValue() string {
	if x != nil {
		return x.CurrentValue
	}
	return ""
}

type SearchStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value"`
}

func (x *SearchStudentRequest) Reset() {
	*x = SearchStudentRequest{}
	mi := &file_education_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStudentRequest) ProtoMessage() {}

func (x *SearchStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStudentRequest.ProtoReflect.Descriptor instead.
func (*SearchStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{34}
}

func (x *SearchStudentRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SearchStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Students []*AbsStudent `protobuf:"bytes,1,rep,name=students,proto3" json:"students"`
}

func (x *SearchStudentResponse) Reset() {
	*x = SearchStudentResponse{}
	mi := &file_education_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStudentResponse) ProtoMessage() {}

func (x *SearchStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStudentResponse.ProtoReflect.Descriptor instead.
func (*SearchStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{35}
}

func (x *SearchStudentResponse) GetStudents() []*AbsStudent {
	if x != nil {
		return x.Students
	}
	return nil
}

type AbsStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phoneNumber,proto3" json:"phoneNumber"`
}

func (x *AbsStudent) Reset() {
	*x = AbsStudent{}
	mi := &file_education_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsStudent) ProtoMessage() {}

func (x *AbsStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsStudent.ProtoReflect.Descriptor instead.
func (*AbsStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{36}
}

func (x *AbsStudent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsStudent) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type GetAllStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition"`
	Page      string `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Size      string `protobuf:"bytes,3,opt,name=size,proto3" json:"size"`
}

func (x *GetAllStudentRequest) Reset() {
	*x = GetAllStudentRequest{}
	mi := &file_education_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStudentRequest) ProtoMessage() {}

func (x *GetAllStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStudentRequest.ProtoReflect.Descriptor instead.
func (*GetAllStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{37}
}

func (x *GetAllStudentRequest) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *GetAllStudentRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GetAllStudentRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type GetAllStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   []*GetGroupsAbsForStudent `protobuf:"bytes,1,rep,name=response,proto3" json:"response"`
	TotalCount int32                     `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount"`
}

func (x *GetAllStudentResponse) Reset() {
	*x = GetAllStudentResponse{}
	mi := &file_education_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStudentResponse) ProtoMessage() {}

func (x *GetAllStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStudentResponse.ProtoReflect.Descriptor instead.
func (*GetAllStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{38}
}

func (x *GetAllStudentResponse) GetResponse() []*GetGroupsAbsForStudent {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetAllStudentResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetGroupsAbsForStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name              string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Gender            bool                     `protobuf:"varint,3,opt,name=gender,proto3" json:"gender"`
	DateOfBirth       string                   `protobuf:"bytes,4,opt,name=dateOfBirth,proto3" json:"dateOfBirth"`
	Phone             string                   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone"`
	Address           string                   `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	PassportId        string                   `protobuf:"bytes,7,opt,name=passportId,proto3" json:"passportId"`
	AdditionalContact string                   `protobuf:"bytes,8,opt,name=additionalContact,proto3" json:"additionalContact"`
	Balance           float64                  `protobuf:"fixed64,10,opt,name=balance,proto3" json:"balance"`
	Condition         string                   `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition"`
	TelegramUsername  string                   `protobuf:"bytes,12,opt,name=telegramUsername,proto3" json:"telegramUsername"`
	CreatedAt         string                   `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt"`
	Groups            []*GroupGetAllStudentAbs `protobuf:"bytes,9,rep,name=groups,proto3" json:"groups"`
}

func (x *GetGroupsAbsForStudent) Reset() {
	*x = GetGroupsAbsForStudent{}
	mi := &file_education_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsAbsForStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsAbsForStudent) ProtoMessage() {}

func (x *GetGroupsAbsForStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsAbsForStudent.ProtoReflect.Descriptor instead.
func (*GetGroupsAbsForStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{39}
}

func (x *GetGroupsAbsForStudent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *GetGroupsAbsForStudent) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetGroupsAbsForStudent) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetGroups() []*GroupGetAllStudentAbs {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupGetAllStudentAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,10,opt,name=id,proto3" json:"id"`
	Name               string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Course             *AbsCourse `protobuf:"bytes,2,opt,name=course,proto3" json:"course"`
	TeacherName        string     `protobuf:"bytes,3,opt,name=teacherName,proto3" json:"teacherName"`
	Type               string     `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	Days               []string   `protobuf:"bytes,5,rep,name=days,proto3" json:"days"`
	RoomId             int32      `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId"`
	LessonStartTime    string     `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	GroupStartDate     string     `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate"`
	GroupEndDate       string     `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate"`
	StudentCondition   string     `protobuf:"bytes,11,opt,name=studentCondition,proto3" json:"studentCondition"`
	StudentActivatedAt string     `protobuf:"bytes,12,opt,name=studentActivatedAt,proto3" json:"studentActivatedAt"`
}

func (x *GroupGetAllStudentAbs) Reset() {
	*x = GroupGetAllStudentAbs{}
	mi := &file_education_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupGetAllStudentAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGetAllStudentAbs) ProtoMessage() {}

func (x *GroupGetAllStudentAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGetAllStudentAbs.ProtoReflect.Descriptor instead.
func (*GroupGetAllStudentAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{40}
}

func (x *GroupGetAllStudentAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *GroupGetAllStudentAbs) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GroupGetAllStudentAbs) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GroupGetAllStudentAbs) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetStudentCondition() string {
	if x != nil {
		return x.StudentCondition
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetStudentActivatedAt() string {
	if x != nil {
		return x.StudentActivatedAt
	}
	return ""
}

type CreateStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber       string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	DateOfBirth       string `protobuf:"bytes,3,opt,name=dateOfBirth,proto3" json:"dateOfBirth"`
	Gender            bool   `protobuf:"varint,4,opt,name=gender,proto3" json:"gender"`
	AdditionalContact string `protobuf:"bytes,5,opt,name=additionalContact,proto3" json:"additionalContact"`
	Address           string `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	PassportId        string `protobuf:"bytes,7,opt,name=passportId,proto3" json:"passportId"`
	TelegramUsername  string `protobuf:"bytes,10,opt,name=telegramUsername,proto3" json:"telegramUsername"`
	GroupId           string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId"`
	DateFrom          string `protobuf:"bytes,9,opt,name=dateFrom,proto3" json:"dateFrom"`
	CreatedBy         string `protobuf:"bytes,11,opt,name=createdBy,proto3" json:"createdBy"`
}

func (x *CreateStudentRequest) Reset() {
	*x = CreateStudentRequest{}
	mi := &file_education_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStudentRequest) ProtoMessage() {}

func (x *CreateStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStudentRequest.ProtoReflect.Descriptor instead.
func (*CreateStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{41}
}

func (x *CreateStudentRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateStudentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStudentRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *CreateStudentRequest) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *CreateStudentRequest) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

func (x *CreateStudentRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateStudentRequest) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

func (x *CreateStudentRequest) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *CreateStudentRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateStudentRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *CreateStudentRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type UpdateStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId         string `protobuf:"bytes,8,opt,name=studentId,proto3" json:"studentId"`
	PhoneNumber       string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	DateOfBirth       string `protobuf:"bytes,3,opt,name=dateOfBirth,proto3" json:"dateOfBirth"`
	Gender            bool   `protobuf:"varint,4,opt,name=gender,proto3" json:"gender"`
	AdditionalContact string `protobuf:"bytes,5,opt,name=additionalContact,proto3" json:"additionalContact"`
	Address           string `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	PassportId        string `protobuf:"bytes,7,opt,name=passportId,proto3" json:"passportId"`
}

func (x *UpdateStudentRequest) Reset() {
	*x = UpdateStudentRequest{}
	mi := &file_education_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStudentRequest) ProtoMessage() {}

func (x *UpdateStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStudentRequest.ProtoReflect.Descriptor instead.
func (*UpdateStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *UpdateStudentRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateStudentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStudentRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UpdateStudentRequest) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *UpdateStudentRequest) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

func (x *UpdateStudentRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateStudentRequest) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

type AddToGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedDate string   `protobuf:"bytes,1,opt,name=createdDate,proto3" json:"createdDate"`
	GroupId     string   `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
	StudentIds  []string `protobuf:"bytes,3,rep,name=student_ids,json=studentIds,proto3" json:"student_ids"`
	CreatedBy   string   `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy"`
}

func (x *AddToGroupRequest) Reset() {
	*x = AddToGroupRequest{}
	mi := &file_education_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToGroupRequest) ProtoMessage() {}

func (x *AddToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToGroupRequest.ProtoReflect.Descriptor instead.
func (*AddToGroupRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{43}
}

func (x *AddToGroupRequest) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *AddToGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AddToGroupRequest) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

func (x *AddToGroupRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetStudentByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Gender      bool               `protobuf:"varint,3,opt,name=gender,proto3" json:"gender"`
	DateOfBirth string             `protobuf:"bytes,4,opt,name=dateOfBirth,proto3" json:"dateOfBirth"`
	Phone       string             `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone"`
	Balance     float64            `protobuf:"fixed64,6,opt,name=balance,proto3" json:"balance"`
	CreatedAt   string             `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt"`
	Groups      []*GetGroupStudent `protobuf:"bytes,8,rep,name=groups,proto3" json:"groups"`
	Condition   string             `protobuf:"bytes,9,opt,name=condition,proto3" json:"condition"`
}

func (x *GetStudentByIdResponse) Reset() {
	*x = GetStudentByIdResponse{}
	mi := &file_education_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentByIdResponse) ProtoMessage() {}

func (x *GetStudentByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentByIdResponse.ProtoReflect.Descriptor instead.
func (*GetStudentByIdResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{44}
}

func (x *GetStudentByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetStudentByIdResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetStudentByIdResponse) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *GetStudentByIdResponse) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *GetStudentByIdResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetStudentByIdResponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetStudentByIdResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetStudentByIdResponse) GetGroups() []*GetGroupStudent {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetStudentByIdResponse) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type NoteStudentByAbsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *NoteStudentByAbsRequest) Reset() {
	*x = NoteStudentByAbsRequest{}
	mi := &file_education_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteStudentByAbsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteStudentByAbsRequest) ProtoMessage() {}

func (x *NoteStudentByAbsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteStudentByAbsRequest.ProtoReflect.Descriptor instead.
func (*NoteStudentByAbsRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{45}
}

func (x *NoteStudentByAbsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGroupStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name               string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	DateType           string     `protobuf:"bytes,3,opt,name=dateType,proto3" json:"dateType"`
	Days               []string   `protobuf:"bytes,4,rep,name=days,proto3" json:"days"`
	Room               *AbsRoom   `protobuf:"bytes,5,opt,name=room,proto3" json:"room"`
	Course             *AbsCourse `protobuf:"bytes,6,opt,name=course,proto3" json:"course"`
	LessonStartTime    string     `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime"`
	GroupStartDate     string     `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate"`
	GroupEndDate       string     `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate"`
	StudentCondition   string     `protobuf:"bytes,11,opt,name=studentCondition,proto3" json:"studentCondition"`
	StudentActivatedAt string     `protobuf:"bytes,12,opt,name=studentActivatedAt,proto3" json:"studentActivatedAt"`
	StudentAddedAt     string     `protobuf:"bytes,14,opt,name=studentAddedAt,proto3" json:"studentAddedAt"`
	TeacherName        string     `protobuf:"bytes,15,opt,name=teacherName,proto3" json:"teacherName"`
	PriceForStudent    float64    `protobuf:"fixed64,13,opt,name=priceForStudent,proto3" json:"priceForStudent"`
}

func (x *GetGroupStudent) Reset() {
	*x = GetGroupStudent{}
	mi := &file_education_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupStudent) ProtoMessage() {}

func (x *GetGroupStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupStudent.ProtoReflect.Descriptor instead.
func (*GetGroupStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{46}
}

func (x *GetGroupStudent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupStudent) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

func (x *GetGroupStudent) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetGroupStudent) GetRoom() *AbsRoom {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetGroupStudent) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *GetGroupStudent) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupStudent) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GetGroupStudent) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *GetGroupStudent) GetStudentCondition() string {
	if x != nil {
		return x.StudentCondition
	}
	return ""
}

func (x *GetGroupStudent) GetStudentActivatedAt() string {
	if x != nil {
		return x.StudentActivatedAt
	}
	return ""
}

func (x *GetGroupStudent) GetStudentAddedAt() string {
	if x != nil {
		return x.StudentAddedAt
	}
	return ""
}

func (x *GetGroupStudent) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetGroupStudent) GetPriceForStudent() float64 {
	if x != nil {
		return x.PriceForStudent
	}
	return 0
}

type GetNotesByStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*AbsNote `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes"`
}

func (x *GetNotesByStudent) Reset() {
	*x = GetNotesByStudent{}
	mi := &file_education_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotesByStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesByStudent) ProtoMessage() {}

func (x *GetNotesByStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesByStudent.ProtoReflect.Descriptor instead.
func (*GetNotesByStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{47}
}

func (x *GetNotesByStudent) GetNotes() []*AbsNote {
	if x != nil {
		return x.Notes
	}
	return nil
}

type AbsNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Comment   string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment"`
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *AbsNote) Reset() {
	*x = AbsNote{}
	mi := &file_education_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsNote) ProtoMessage() {}

func (x *AbsNote) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsNote.ProtoReflect.Descriptor instead.
func (*AbsNote) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{48}
}

func (x *AbsNote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsNote) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AbsNote) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type CreateNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note      string `protobuf:"bytes,1,opt,name=note,proto3" json:"note"`
	StudentId string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId"`
}

func (x *CreateNoteRequest) Reset() {
	*x = CreateNoteRequest{}
	mi := &file_education_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteRequest) ProtoMessage() {}

func (x *CreateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{49}
}

func (x *CreateNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateNoteRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

var File_education_proto protoreflect.FileDescriptor

var file_education_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x3c, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x62, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x49, 0x0a, 0x07, 0x41, 0x62,
	0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x73, 0x12,
	0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22,
	0xb7, 0x01, 0x0a, 0x09, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x41, 0x62, 0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22,
	0xe1, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x41, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x25,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x5b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xff, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3,
	0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x3d, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x83, 0x03, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0c, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xb3,
	0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x02, 0x0a, 0x08, 0x41, 0x62, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x7e, 0x0a, 0x0a, 0x41, 0x62,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x0a, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x62, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0,
	0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x62, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x9d, 0x03, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xee, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x17, 0x4e,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x26,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x07, 0x41, 0x62, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x45, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x32, 0x83, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x41, 0x62, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe7, 0x02, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x41, 0x62, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xad, 0x04, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xae, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfe, 0x08, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x49, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x16,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_education_proto_rawDescOnce sync.Once
	file_education_proto_rawDescData = file_education_proto_rawDesc
)

func file_education_proto_rawDescGZIP() []byte {
	file_education_proto_rawDescOnce.Do(func() {
		file_education_proto_rawDescData = protoimpl.X.CompressGZIP(file_education_proto_rawDescData)
	})
	return file_education_proto_rawDescData
}

var file_education_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_education_proto_goTypes = []any{
	(*CreateRoomRequest)(nil),             // 0: education.CreateRoomRequest
	(*GetUpdateRoomAbs)(nil),              // 1: education.GetUpdateRoomAbs
	(*AbsRoom)(nil),                       // 2: education.AbsRoom
	(*CreateCourseRequest)(nil),           // 3: education.CreateCourseRequest
	(*GetUpdateCourseAbs)(nil),            // 4: education.GetUpdateCourseAbs
	(*AbsCourse)(nil),                     // 5: education.AbsCourse
	(*GetCourseByIdResponse)(nil),         // 6: education.GetCourseByIdResponse
	(*GetCourseByIdRequest)(nil),          // 7: education.GetCourseByIdRequest
	(*GetGroupsByTeacherIdRequest)(nil),   // 8: education.GetGroupsByTeacherIdRequest
	(*GetGroupsByTeacherResponse)(nil),    // 9: education.GetGroupsByTeacherResponse
	(*GetGroupByTeacherAbs)(nil),          // 10: education.GetGroupByTeacherAbs
	(*CreateGroupRequest)(nil),            // 11: education.CreateGroupRequest
	(*GetGroupByIdRequest)(nil),           // 12: education.GetGroupByIdRequest
	(*GetUpdateGroupAbs)(nil),             // 13: education.GetUpdateGroupAbs
	(*GetGroupsByCourseResponse)(nil),     // 14: education.GetGroupsByCourseResponse
	(*GetGroupByCourseAbsResponse)(nil),   // 15: education.GetGroupByCourseAbsResponse
	(*GetGroupAbsResponse)(nil),           // 16: education.GetGroupAbsResponse
	(*GetGroupsResponse)(nil),             // 17: education.GetGroupsResponse
	(*GetGroupsRequest)(nil),              // 18: education.GetGroupsRequest
	(*GetAttendanceRequest)(nil),          // 19: education.GetAttendanceRequest
	(*GetAttendanceResponse)(nil),         // 20: education.GetAttendanceResponse
	(*Day)(nil),                           // 21: education.Day
	(*Student)(nil),                       // 22: education.Student
	(*Attendance)(nil),                    // 23: education.Attendance
	(*FreezeDetail)(nil),                  // 24: education.FreezeDetail
	(*SetAttendanceRequest)(nil),          // 25: education.SetAttendanceRequest
	(*DeleteStudentRequest)(nil),          // 26: education.DeleteStudentRequest
	(*ChangeConditionStudentRequest)(nil), // 27: education.ChangeConditionStudentRequest
	(*TransferLessonRequest)(nil),         // 28: education.TransferLessonRequest
	(*GetHistoryGroupResponse)(nil),       // 29: education.GetHistoryGroupResponse
	(*GetHistoryStudentResponse)(nil),     // 30: education.GetHistoryStudentResponse
	(*AbsStudentHistory)(nil),             // 31: education.AbsStudentHistory
	(*AbsGroup)(nil),                      // 32: education.AbsGroup
	(*AbsHistory)(nil),                    // 33: education.AbsHistory
	(*SearchStudentRequest)(nil),          // 34: education.SearchStudentRequest
	(*SearchStudentResponse)(nil),         // 35: education.SearchStudentResponse
	(*AbsStudent)(nil),                    // 36: education.AbsStudent
	(*GetAllStudentRequest)(nil),          // 37: education.GetAllStudentRequest
	(*GetAllStudentResponse)(nil),         // 38: education.GetAllStudentResponse
	(*GetGroupsAbsForStudent)(nil),        // 39: education.GetGroupsAbsForStudent
	(*GroupGetAllStudentAbs)(nil),         // 40: education.GroupGetAllStudentAbs
	(*CreateStudentRequest)(nil),          // 41: education.CreateStudentRequest
	(*UpdateStudentRequest)(nil),          // 42: education.UpdateStudentRequest
	(*AddToGroupRequest)(nil),             // 43: education.AddToGroupRequest
	(*GetStudentByIdResponse)(nil),        // 44: education.GetStudentByIdResponse
	(*NoteStudentByAbsRequest)(nil),       // 45: education.NoteStudentByAbsRequest
	(*GetGroupStudent)(nil),               // 46: education.GetGroupStudent
	(*GetNotesByStudent)(nil),             // 47: education.GetNotesByStudent
	(*AbsNote)(nil),                       // 48: education.AbsNote
	(*CreateNoteRequest)(nil),             // 49: education.CreateNoteRequest
	(*PageRequest)(nil),                   // 50: common.PageRequest
	(*emptypb.Empty)(nil),                 // 51: google.protobuf.Empty
	(*DeleteAbsRequest)(nil),              // 52: common.DeleteAbsRequest
	(*AbsResponse)(nil),                   // 53: common.AbsResponse
}
var file_education_proto_depIdxs = []int32{
	2,  // 0: education.GetUpdateRoomAbs.rooms:type_name -> education.AbsRoom
	5,  // 1: education.GetUpdateCourseAbs.courses:type_name -> education.AbsCourse
	10, // 2: education.GetGroupsByTeacherResponse.groups:type_name -> education.GetGroupByTeacherAbs
	36, // 3: education.GetGroupByTeacherAbs.students:type_name -> education.AbsStudent
	15, // 4: education.GetGroupsByCourseResponse.groups:type_name -> education.GetGroupByCourseAbsResponse
	5,  // 5: education.GetGroupAbsResponse.course:type_name -> education.AbsCourse
	2,  // 6: education.GetGroupAbsResponse.room:type_name -> education.AbsRoom
	16, // 7: education.GetGroupsResponse.groups:type_name -> education.GetGroupAbsResponse
	50, // 8: education.GetGroupsRequest.page:type_name -> common.PageRequest
	21, // 9: education.GetAttendanceResponse.days:type_name -> education.Day
	22, // 10: education.GetAttendanceResponse.students:type_name -> education.Student
	23, // 11: education.Student.attendance:type_name -> education.Attendance
	24, // 12: education.Student.freezeDetail:type_name -> education.FreezeDetail
	33, // 13: education.GetHistoryGroupResponse.groupHistory:type_name -> education.AbsHistory
	31, // 14: education.GetHistoryGroupResponse.studentsHistory:type_name -> education.AbsStudentHistory
	33, // 15: education.GetHistoryStudentResponse.studentHistory:type_name -> education.AbsHistory
	31, // 16: education.GetHistoryStudentResponse.conditionsHistory:type_name -> education.AbsStudentHistory
	36, // 17: education.AbsStudentHistory.student:type_name -> education.AbsStudent
	32, // 18: education.AbsStudentHistory.group:type_name -> education.AbsGroup
	5,  // 19: education.AbsGroup.course:type_name -> education.AbsCourse
	36, // 20: education.SearchStudentResponse.students:type_name -> education.AbsStudent
	39, // 21: education.GetAllStudentResponse.response:type_name -> education.GetGroupsAbsForStudent
	40, // 22: education.GetGroupsAbsForStudent.groups:type_name -> education.GroupGetAllStudentAbs
	5,  // 23: education.GroupGetAllStudentAbs.course:type_name -> education.AbsCourse
	46, // 24: education.GetStudentByIdResponse.groups:type_name -> education.GetGroupStudent
	2,  // 25: education.GetGroupStudent.room:type_name -> education.AbsRoom
	5,  // 26: education.GetGroupStudent.course:type_name -> education.AbsCourse
	48, // 27: education.GetNotesByStudent.notes:type_name -> education.AbsNote
	0,  // 28: education.RoomService.CreateRoom:input_type -> education.CreateRoomRequest
	51, // 29: education.RoomService.GetRooms:input_type -> google.protobuf.Empty
	2,  // 30: education.RoomService.UpdateRoom:input_type -> education.AbsRoom
	52, // 31: education.RoomService.DeleteRoom:input_type -> common.DeleteAbsRequest
	3,  // 32: education.CourseService.CreateCourse:input_type -> education.CreateCourseRequest
	51, // 33: education.CourseService.GetCourses:input_type -> google.protobuf.Empty
	7,  // 34: education.CourseService.GetCourseById:input_type -> education.GetCourseByIdRequest
	5,  // 35: education.CourseService.UpdateCourse:input_type -> education.AbsCourse
	52, // 36: education.CourseService.DeleteCourse:input_type -> common.DeleteAbsRequest
	11, // 37: education.GroupService.CreateGroup:input_type -> education.CreateGroupRequest
	18, // 38: education.GroupService.GetGroups:input_type -> education.GetGroupsRequest
	12, // 39: education.GroupService.GetGroupById:input_type -> education.GetGroupByIdRequest
	12, // 40: education.GroupService.GetGroupsByCourseId:input_type -> education.GetGroupByIdRequest
	13, // 41: education.GroupService.UpdateGroup:input_type -> education.GetUpdateGroupAbs
	52, // 42: education.GroupService.DeleteGroup:input_type -> common.DeleteAbsRequest
	8,  // 43: education.GroupService.GetGroupsByTeacherId:input_type -> education.GetGroupsByTeacherIdRequest
	19, // 44: education.AttendanceService.GetAttendance:input_type -> education.GetAttendanceRequest
	25, // 45: education.AttendanceService.SetAttendance:input_type -> education.SetAttendanceRequest
	37, // 46: education.StudentService.GetAllStudent:input_type -> education.GetAllStudentRequest
	41, // 47: education.StudentService.CreateStudent:input_type -> education.CreateStudentRequest
	42, // 48: education.StudentService.UpdateStudent:input_type -> education.UpdateStudentRequest
	26, // 49: education.StudentService.DeleteStudent:input_type -> education.DeleteStudentRequest
	43, // 50: education.StudentService.AddToGroup:input_type -> education.AddToGroupRequest
	45, // 51: education.StudentService.GetStudentById:input_type -> education.NoteStudentByAbsRequest
	45, // 52: education.StudentService.GetNoteByStudent:input_type -> education.NoteStudentByAbsRequest
	49, // 53: education.StudentService.CreateNoteForStudent:input_type -> education.CreateNoteRequest
	45, // 54: education.StudentService.DeleteStudentNote:input_type -> education.NoteStudentByAbsRequest
	34, // 55: education.StudentService.SearchStudent:input_type -> education.SearchStudentRequest
	45, // 56: education.StudentService.GetHistoryGroupById:input_type -> education.NoteStudentByAbsRequest
	45, // 57: education.StudentService.GetHistoryStudentById:input_type -> education.NoteStudentByAbsRequest
	28, // 58: education.StudentService.TransferLessonDate:input_type -> education.TransferLessonRequest
	27, // 59: education.StudentService.ChangeConditionStudent:input_type -> education.ChangeConditionStudentRequest
	53, // 60: education.RoomService.CreateRoom:output_type -> common.AbsResponse
	1,  // 61: education.RoomService.GetRooms:output_type -> education.GetUpdateRoomAbs
	53, // 62: education.RoomService.UpdateRoom:output_type -> common.AbsResponse
	53, // 63: education.RoomService.DeleteRoom:output_type -> common.AbsResponse
	53, // 64: education.CourseService.CreateCourse:output_type -> common.AbsResponse
	4,  // 65: education.CourseService.GetCourses:output_type -> education.GetUpdateCourseAbs
	6,  // 66: education.CourseService.GetCourseById:output_type -> education.GetCourseByIdResponse
	53, // 67: education.CourseService.UpdateCourse:output_type -> common.AbsResponse
	53, // 68: education.CourseService.DeleteCourse:output_type -> common.AbsResponse
	53, // 69: education.GroupService.CreateGroup:output_type -> common.AbsResponse
	17, // 70: education.GroupService.GetGroups:output_type -> education.GetGroupsResponse
	16, // 71: education.GroupService.GetGroupById:output_type -> education.GetGroupAbsResponse
	14, // 72: education.GroupService.GetGroupsByCourseId:output_type -> education.GetGroupsByCourseResponse
	53, // 73: education.GroupService.UpdateGroup:output_type -> common.AbsResponse
	53, // 74: education.GroupService.DeleteGroup:output_type -> common.AbsResponse
	9,  // 75: education.GroupService.GetGroupsByTeacherId:output_type -> education.GetGroupsByTeacherResponse
	20, // 76: education.AttendanceService.GetAttendance:output_type -> education.GetAttendanceResponse
	53, // 77: education.AttendanceService.SetAttendance:output_type -> common.AbsResponse
	38, // 78: education.StudentService.GetAllStudent:output_type -> education.GetAllStudentResponse
	53, // 79: education.StudentService.CreateStudent:output_type -> common.AbsResponse
	53, // 80: education.StudentService.UpdateStudent:output_type -> common.AbsResponse
	53, // 81: education.StudentService.DeleteStudent:output_type -> common.AbsResponse
	53, // 82: education.StudentService.AddToGroup:output_type -> common.AbsResponse
	44, // 83: education.StudentService.GetStudentById:output_type -> education.GetStudentByIdResponse
	47, // 84: education.StudentService.GetNoteByStudent:output_type -> education.GetNotesByStudent
	53, // 85: education.StudentService.CreateNoteForStudent:output_type -> common.AbsResponse
	53, // 86: education.StudentService.DeleteStudentNote:output_type -> common.AbsResponse
	35, // 87: education.StudentService.SearchStudent:output_type -> education.SearchStudentResponse
	29, // 88: education.StudentService.GetHistoryGroupById:output_type -> education.GetHistoryGroupResponse
	30, // 89: education.StudentService.GetHistoryStudentById:output_type -> education.GetHistoryStudentResponse
	53, // 90: education.StudentService.TransferLessonDate:output_type -> common.AbsResponse
	53, // 91: education.StudentService.ChangeConditionStudent:output_type -> common.AbsResponse
	60, // [60:92] is the sub-list for method output_type
	28, // [28:60] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_education_proto_init() }
func file_education_proto_init() {
	if File_education_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_education_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_education_proto_goTypes,
		DependencyIndexes: file_education_proto_depIdxs,
		MessageInfos:      file_education_proto_msgTypes,
	}.Build()
	File_education_proto = out.File
	file_education_proto_rawDesc = nil
	file_education_proto_goTypes = nil
	file_education_proto_depIdxs = nil
}
