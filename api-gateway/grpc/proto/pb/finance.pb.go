// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: finance.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetHistoryDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId"`
	GroupId   string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId"`
}

func (x *GetHistoryDiscountRequest) Reset() {
	*x = GetHistoryDiscountRequest{}
	mi := &file_finance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryDiscountRequest) ProtoMessage() {}

func (x *GetHistoryDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryDiscountRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryDiscountRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{0}
}

func (x *GetHistoryDiscountRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetHistoryDiscountRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetHistoryDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discounts []*AbsHistoryDiscount `protobuf:"bytes,1,rep,name=discounts,proto3" json:"discounts"`
}

func (x *GetHistoryDiscountResponse) Reset() {
	*x = GetHistoryDiscountResponse{}
	mi := &file_finance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryDiscountResponse) ProtoMessage() {}

func (x *GetHistoryDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryDiscountResponse.ProtoReflect.Descriptor instead.
func (*GetHistoryDiscountResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{1}
}

func (x *GetHistoryDiscountResponse) GetDiscounts() []*AbsHistoryDiscount {
	if x != nil {
		return x.Discounts
	}
	return nil
}

type AbsHistoryDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId"`
	GroupName     string `protobuf:"bytes,10,opt,name=groupName,proto3" json:"groupName"`
	StudentId     string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId"`
	StudentName   string `protobuf:"bytes,11,opt,name=studentName,proto3" json:"studentName"`
	DiscountPrice string `protobuf:"bytes,3,opt,name=discountPrice,proto3" json:"discountPrice"`
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment"`
	StartDate     string `protobuf:"bytes,5,opt,name=startDate,proto3" json:"startDate"`
	EndDate       string `protobuf:"bytes,6,opt,name=endDate,proto3" json:"endDate"`
	WithTeacher   bool   `protobuf:"varint,7,opt,name=withTeacher,proto3" json:"withTeacher"`
	Action        string `protobuf:"bytes,8,opt,name=action,proto3" json:"action"`
	CreatedAt     string `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *AbsHistoryDiscount) Reset() {
	*x = AbsHistoryDiscount{}
	mi := &file_finance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsHistoryDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsHistoryDiscount) ProtoMessage() {}

func (x *AbsHistoryDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsHistoryDiscount.ProtoReflect.Descriptor instead.
func (*AbsHistoryDiscount) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{2}
}

func (x *AbsHistoryDiscount) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AbsHistoryDiscount) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AbsHistoryDiscount) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *AbsHistoryDiscount) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *AbsHistoryDiscount) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *AbsHistoryDiscount) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AbsHistoryDiscount) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AbsHistoryDiscount) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *AbsHistoryDiscount) GetWithTeacher() bool {
	if x != nil {
		return x.WithTeacher
	}
	return false
}

func (x *AbsHistoryDiscount) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AbsHistoryDiscount) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type AbsDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId"`
	StudentId     string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId"`
	DiscountPrice string `protobuf:"bytes,3,opt,name=discountPrice,proto3" json:"discountPrice"`
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment"`
	StartDate     string `protobuf:"bytes,5,opt,name=startDate,proto3" json:"startDate"`
	EndDate       string `protobuf:"bytes,6,opt,name=endDate,proto3" json:"endDate"`
	WithTeacher   bool   `protobuf:"varint,7,opt,name=withTeacher,proto3" json:"withTeacher"`
}

func (x *AbsDiscountRequest) Reset() {
	*x = AbsDiscountRequest{}
	mi := &file_finance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsDiscountRequest) ProtoMessage() {}

func (x *AbsDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsDiscountRequest.ProtoReflect.Descriptor instead.
func (*AbsDiscountRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{3}
}

func (x *AbsDiscountRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AbsDiscountRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *AbsDiscountRequest) GetDiscountPrice() string {
	if x != nil {
		return x.DiscountPrice
	}
	return ""
}

func (x *AbsDiscountRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AbsDiscountRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AbsDiscountRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *AbsDiscountRequest) GetWithTeacher() bool {
	if x != nil {
		return x.WithTeacher
	}
	return false
}

type GetInformationDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId"`
}

func (x *GetInformationDiscountRequest) Reset() {
	*x = GetInformationDiscountRequest{}
	mi := &file_finance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInformationDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInformationDiscountRequest) ProtoMessage() {}

func (x *GetInformationDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInformationDiscountRequest.ProtoReflect.Descriptor instead.
func (*GetInformationDiscountRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{4}
}

func (x *GetInformationDiscountRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetInformationDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discounts []*AbsStudentDiscount `protobuf:"bytes,1,rep,name=discounts,proto3" json:"discounts"`
}

func (x *GetInformationDiscountResponse) Reset() {
	*x = GetInformationDiscountResponse{}
	mi := &file_finance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInformationDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInformationDiscountResponse) ProtoMessage() {}

func (x *GetInformationDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInformationDiscountResponse.ProtoReflect.Descriptor instead.
func (*GetInformationDiscountResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{5}
}

func (x *GetInformationDiscountResponse) GetDiscounts() []*AbsStudentDiscount {
	if x != nil {
		return x.Discounts
	}
	return nil
}

type AbsStudentDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId          string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId"`
	StudentName        string `protobuf:"bytes,2,opt,name=studentName,proto3" json:"studentName"`
	StudentPhoneNumber string `protobuf:"bytes,3,opt,name=studentPhoneNumber,proto3" json:"studentPhoneNumber"`
	Discount           string `protobuf:"bytes,4,opt,name=discount,proto3" json:"discount"`
	Cause              string `protobuf:"bytes,5,opt,name=cause,proto3" json:"cause"`
	CreatedAt          string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt"`
	StartAt            string `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt              string `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	WithTeacher        bool   `protobuf:"varint,9,opt,name=withTeacher,proto3" json:"withTeacher"`
}

func (x *AbsStudentDiscount) Reset() {
	*x = AbsStudentDiscount{}
	mi := &file_finance_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsStudentDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsStudentDiscount) ProtoMessage() {}

func (x *AbsStudentDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsStudentDiscount.ProtoReflect.Descriptor instead.
func (*AbsStudentDiscount) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{6}
}

func (x *AbsStudentDiscount) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *AbsStudentDiscount) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *AbsStudentDiscount) GetStudentPhoneNumber() string {
	if x != nil {
		return x.StudentPhoneNumber
	}
	return ""
}

func (x *AbsStudentDiscount) GetDiscount() string {
	if x != nil {
		return x.Discount
	}
	return ""
}

func (x *AbsStudentDiscount) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *AbsStudentDiscount) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AbsStudentDiscount) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *AbsStudentDiscount) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *AbsStudentDiscount) GetWithTeacher() bool {
	if x != nil {
		return x.WithTeacher
	}
	return false
}

type CreateCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
}

func (x *CreateCategoryRequest) Reset() {
	*x = CreateCategoryRequest{}
	mi := &file_finance_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryRequest) ProtoMessage() {}

func (x *CreateCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCategoryRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type GetAllCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*AbsCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories"`
}

func (x *GetAllCategoryRequest) Reset() {
	*x = GetAllCategoryRequest{}
	mi := &file_finance_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCategoryRequest) ProtoMessage() {}

func (x *GetAllCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetAllCategoryRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllCategoryRequest) GetCategories() []*AbsCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type AbsCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
}

func (x *AbsCategory) Reset() {
	*x = AbsCategory{}
	mi := &file_finance_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsCategory) ProtoMessage() {}

func (x *AbsCategory) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsCategory.ProtoReflect.Descriptor instead.
func (*AbsCategory) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{9}
}

func (x *AbsCategory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsCategory) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type GetAllExpenseDiagramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserOrCategories       []string `protobuf:"bytes,1,rep,name=userOrCategories,proto3" json:"userOrCategories"`
	UserOrCategoriesAmount []string `protobuf:"bytes,2,rep,name=userOrCategoriesAmount,proto3" json:"userOrCategoriesAmount"`
	MonthAmount            []string `protobuf:"bytes,3,rep,name=monthAmount,proto3" json:"monthAmount"`
	Months                 []string `protobuf:"bytes,4,rep,name=months,proto3" json:"months"`
	AmountCommonExpense    string   `protobuf:"bytes,5,opt,name=amountCommonExpense,proto3" json:"amountCommonExpense"`
}

func (x *GetAllExpenseDiagramResponse) Reset() {
	*x = GetAllExpenseDiagramResponse{}
	mi := &file_finance_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllExpenseDiagramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllExpenseDiagramResponse) ProtoMessage() {}

func (x *GetAllExpenseDiagramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllExpenseDiagramResponse.ProtoReflect.Descriptor instead.
func (*GetAllExpenseDiagramResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllExpenseDiagramResponse) GetUserOrCategories() []string {
	if x != nil {
		return x.UserOrCategories
	}
	return nil
}

func (x *GetAllExpenseDiagramResponse) GetUserOrCategoriesAmount() []string {
	if x != nil {
		return x.UserOrCategoriesAmount
	}
	return nil
}

func (x *GetAllExpenseDiagramResponse) GetMonthAmount() []string {
	if x != nil {
		return x.MonthAmount
	}
	return nil
}

func (x *GetAllExpenseDiagramResponse) GetMonths() []string {
	if x != nil {
		return x.Months
	}
	return nil
}

func (x *GetAllExpenseDiagramResponse) GetAmountCommonExpense() string {
	if x != nil {
		return x.AmountCommonExpense
	}
	return ""
}

type GetAllExpenseDiagramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to"`
}

func (x *GetAllExpenseDiagramRequest) Reset() {
	*x = GetAllExpenseDiagramRequest{}
	mi := &file_finance_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllExpenseDiagramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllExpenseDiagramRequest) ProtoMessage() {}

func (x *GetAllExpenseDiagramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllExpenseDiagramRequest.ProtoReflect.Descriptor instead.
func (*GetAllExpenseDiagramRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllExpenseDiagramRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetAllExpenseDiagramRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetAllExpenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string       `protobuf:"bytes,1,opt,name=from,proto3" json:"from"`
	To      string       `protobuf:"bytes,2,opt,name=to,proto3" json:"to"`
	Type    string       `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	Id      string       `protobuf:"bytes,5,opt,name=id,proto3" json:"id"`
	PageReq *PageRequest `protobuf:"bytes,4,opt,name=pageReq,proto3" json:"pageReq"`
}

func (x *GetAllExpenseRequest) Reset() {
	*x = GetAllExpenseRequest{}
	mi := &file_finance_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllExpenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllExpenseRequest) ProtoMessage() {}

func (x *GetAllExpenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllExpenseRequest.ProtoReflect.Descriptor instead.
func (*GetAllExpenseRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllExpenseRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetAllExpenseRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetAllExpenseRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetAllExpenseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAllExpenseRequest) GetPageReq() *PageRequest {
	if x != nil {
		return x.PageReq
	}
	return nil
}

type GetAllExpenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPageCount int32               `protobuf:"varint,1,opt,name=totalPageCount,proto3" json:"totalPageCount"`
	Expenses       []*GetAllExpenseAbs `protobuf:"bytes,2,rep,name=expenses,proto3" json:"expenses"`
}

func (x *GetAllExpenseResponse) Reset() {
	*x = GetAllExpenseResponse{}
	mi := &file_finance_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllExpenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllExpenseResponse) ProtoMessage() {}

func (x *GetAllExpenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllExpenseResponse.ProtoReflect.Descriptor instead.
func (*GetAllExpenseResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllExpenseResponse) GetTotalPageCount() int32 {
	if x != nil {
		return x.TotalPageCount
	}
	return 0
}

func (x *GetAllExpenseResponse) GetExpenses() []*GetAllExpenseAbs {
	if x != nil {
		return x.Expenses
	}
	return nil
}

type GetAllExpenseAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	GivenDate   string               `protobuf:"bytes,2,opt,name=givenDate,proto3" json:"givenDate"`
	Category    *AbsCategory         `protobuf:"bytes,3,opt,name=category,proto3" json:"category"`
	User        *GetUserByIdResponse `protobuf:"bytes,4,opt,name=user,proto3" json:"user"`
	ExpenseType string               `protobuf:"bytes,5,opt,name=expenseType,proto3" json:"expenseType"`
	Sum         string               `protobuf:"bytes,6,opt,name=sum,proto3" json:"sum"`
	Creator     *GetUserByIdResponse `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator"`
	PaymentType string               `protobuf:"bytes,8,opt,name=paymentType,proto3" json:"paymentType"`
	CreatedAt   string               `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt"`
	Title       string               `protobuf:"bytes,10,opt,name=title,proto3" json:"title"`
}

func (x *GetAllExpenseAbs) Reset() {
	*x = GetAllExpenseAbs{}
	mi := &file_finance_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllExpenseAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllExpenseAbs) ProtoMessage() {}

func (x *GetAllExpenseAbs) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllExpenseAbs.ProtoReflect.Descriptor instead.
func (*GetAllExpenseAbs) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllExpenseAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAllExpenseAbs) GetGivenDate() string {
	if x != nil {
		return x.GivenDate
	}
	return ""
}

func (x *GetAllExpenseAbs) GetCategory() *AbsCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *GetAllExpenseAbs) GetUser() *GetUserByIdResponse {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetAllExpenseAbs) GetExpenseType() string {
	if x != nil {
		return x.ExpenseType
	}
	return ""
}

func (x *GetAllExpenseAbs) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *GetAllExpenseAbs) GetCreator() *GetUserByIdResponse {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *GetAllExpenseAbs) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *GetAllExpenseAbs) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetAllExpenseAbs) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreateExpenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	GivenDate     string `protobuf:"bytes,2,opt,name=givenDate,proto3" json:"givenDate"`
	ExpenseType   string `protobuf:"bytes,3,opt,name=expenseType,proto3" json:"expenseType"`
	CategoryId    string `protobuf:"bytes,4,opt,name=categoryId,proto3" json:"categoryId"`
	UserId        string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId"`
	Sum           string `protobuf:"bytes,6,opt,name=sum,proto3" json:"sum"`
	CreatedById   string `protobuf:"bytes,7,opt,name=createdById,proto3" json:"createdById"`
	PaymentMethod string `protobuf:"bytes,8,opt,name=paymentMethod,proto3" json:"paymentMethod"`
}

func (x *CreateExpenseRequest) Reset() {
	*x = CreateExpenseRequest{}
	mi := &file_finance_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExpenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExpenseRequest) ProtoMessage() {}

func (x *CreateExpenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExpenseRequest.ProtoReflect.Descriptor instead.
func (*CreateExpenseRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{15}
}

func (x *CreateExpenseRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateExpenseRequest) GetGivenDate() string {
	if x != nil {
		return x.GivenDate
	}
	return ""
}

func (x *CreateExpenseRequest) GetExpenseType() string {
	if x != nil {
		return x.ExpenseType
	}
	return ""
}

func (x *CreateExpenseRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CreateExpenseRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateExpenseRequest) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *CreateExpenseRequest) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *CreateExpenseRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

type GetAllPaymentsByMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId"`
	Month  string `protobuf:"bytes,2,opt,name=month,proto3" json:"month"`
}

func (x *GetAllPaymentsByMonthRequest) Reset() {
	*x = GetAllPaymentsByMonthRequest{}
	mi := &file_finance_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPaymentsByMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPaymentsByMonthRequest) ProtoMessage() {}

func (x *GetAllPaymentsByMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPaymentsByMonthRequest.ProtoReflect.Descriptor instead.
func (*GetAllPaymentsByMonthRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllPaymentsByMonthRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetAllPaymentsByMonthRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

type GetAllPaymentsByMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payments []*AbsGetAllPaymentsByMonthResponse `protobuf:"bytes,1,rep,name=payments,proto3" json:"payments"`
}

func (x *GetAllPaymentsByMonthResponse) Reset() {
	*x = GetAllPaymentsByMonthResponse{}
	mi := &file_finance_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPaymentsByMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPaymentsByMonthResponse) ProtoMessage() {}

func (x *GetAllPaymentsByMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPaymentsByMonthResponse.ProtoReflect.Descriptor instead.
func (*GetAllPaymentsByMonthResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{17}
}

func (x *GetAllPaymentsByMonthResponse) GetPayments() []*AbsGetAllPaymentsByMonthResponse {
	if x != nil {
		return x.Payments
	}
	return nil
}

type AbsGetAllPaymentsByMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivenDate     string `protobuf:"bytes,1,opt,name=givenDate,proto3" json:"givenDate"`
	PaymentType   string `protobuf:"bytes,2,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	Amount        string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment"`
	CreatedById   string `protobuf:"bytes,5,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id"`
	CreatedByName string `protobuf:"bytes,6,opt,name=created_by_name,json=createdByName,proto3" json:"created_by_name"`
	CreatedAt     string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	PaymentId     string `protobuf:"bytes,8,opt,name=paymentId,proto3" json:"paymentId"`
	GroupId       string `protobuf:"bytes,9,opt,name=groupId,proto3" json:"groupId"`
	GroupName     string `protobuf:"bytes,10,opt,name=groupName,proto3" json:"groupName"`
	Method        string `protobuf:"bytes,11,opt,name=method,proto3" json:"method"`
}

func (x *AbsGetAllPaymentsByMonthResponse) Reset() {
	*x = AbsGetAllPaymentsByMonthResponse{}
	mi := &file_finance_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsGetAllPaymentsByMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsGetAllPaymentsByMonthResponse) ProtoMessage() {}

func (x *AbsGetAllPaymentsByMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsGetAllPaymentsByMonthResponse.ProtoReflect.Descriptor instead.
func (*AbsGetAllPaymentsByMonthResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{18}
}

func (x *AbsGetAllPaymentsByMonthResponse) GetGivenDate() string {
	if x != nil {
		return x.GivenDate
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AbsGetAllPaymentsByMonthResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type GetMonthlyStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthStatus []*AbsGetMonthlyStatusResponse `protobuf:"bytes,1,rep,name=monthStatus,proto3" json:"monthStatus"`
}

func (x *GetMonthlyStatusResponse) Reset() {
	*x = GetMonthlyStatusResponse{}
	mi := &file_finance_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonthlyStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyStatusResponse) ProtoMessage() {}

func (x *GetMonthlyStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMonthlyStatusResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{19}
}

func (x *GetMonthlyStatusResponse) GetMonthStatus() []*AbsGetMonthlyStatusResponse {
	if x != nil {
		return x.MonthStatus
	}
	return nil
}

type AbsGetMonthlyStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month   string `protobuf:"bytes,1,opt,name=month,proto3" json:"month"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
}

func (x *AbsGetMonthlyStatusResponse) Reset() {
	*x = AbsGetMonthlyStatusResponse{}
	mi := &file_finance_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsGetMonthlyStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsGetMonthlyStatusResponse) ProtoMessage() {}

func (x *AbsGetMonthlyStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsGetMonthlyStatusResponse.ProtoReflect.Descriptor instead.
func (*AbsGetMonthlyStatusResponse) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{20}
}

func (x *AbsGetMonthlyStatusResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *AbsGetMonthlyStatusResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type GetMonthlyStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId"`
}

func (x *GetMonthlyStatusRequest) Reset() {
	*x = GetMonthlyStatusRequest{}
	mi := &file_finance_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMonthlyStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyStatusRequest) ProtoMessage() {}

func (x *GetMonthlyStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMonthlyStatusRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{21}
}

func (x *GetMonthlyStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PaymentAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment      string `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment"`
	Date         string `protobuf:"bytes,2,opt,name=date,proto3" json:"date"`
	Method       string `protobuf:"bytes,3,opt,name=method,proto3" json:"method"`
	Sum          string `protobuf:"bytes,4,opt,name=sum,proto3" json:"sum"`
	UserId       string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId"`
	Type         string `protobuf:"bytes,6,opt,name=type,proto3" json:"type"`
	ActionById   string `protobuf:"bytes,7,opt,name=actionById,proto3" json:"actionById"`
	ActionByName string `protobuf:"bytes,8,opt,name=actionByName,proto3" json:"actionByName"`
	GroupId      string `protobuf:"bytes,9,opt,name=groupId,proto3" json:"groupId"`
}

func (x *PaymentAddRequest) Reset() {
	*x = PaymentAddRequest{}
	mi := &file_finance_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAddRequest) ProtoMessage() {}

func (x *PaymentAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAddRequest.ProtoReflect.Descriptor instead.
func (*PaymentAddRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{22}
}

func (x *PaymentAddRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PaymentAddRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PaymentAddRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PaymentAddRequest) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *PaymentAddRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PaymentAddRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentAddRequest) GetActionById() string {
	if x != nil {
		return x.ActionById
	}
	return ""
}

func (x *PaymentAddRequest) GetActionByName() string {
	if x != nil {
		return x.ActionByName
	}
	return ""
}

func (x *PaymentAddRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type PaymentUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debit        string `protobuf:"bytes,1,opt,name=debit,proto3" json:"debit"`
	Method       string `protobuf:"bytes,2,opt,name=method,proto3" json:"method"`
	Date         string `protobuf:"bytes,3,opt,name=date,proto3" json:"date"`
	Comment      string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment"`
	UserId       string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId"`
	PaymentId    string `protobuf:"bytes,6,opt,name=paymentId,proto3" json:"paymentId"`
	ActionById   string `protobuf:"bytes,7,opt,name=actionById,proto3" json:"actionById"`
	ActionByName string `protobuf:"bytes,8,opt,name=actionByName,proto3" json:"actionByName"`
	GroupId      string `protobuf:"bytes,9,opt,name=groupId,proto3" json:"groupId"`
}

func (x *PaymentUpdateRequest) Reset() {
	*x = PaymentUpdateRequest{}
	mi := &file_finance_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentUpdateRequest) ProtoMessage() {}

func (x *PaymentUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentUpdateRequest.ProtoReflect.Descriptor instead.
func (*PaymentUpdateRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{23}
}

func (x *PaymentUpdateRequest) GetDebit() string {
	if x != nil {
		return x.Debit
	}
	return ""
}

func (x *PaymentUpdateRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PaymentUpdateRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PaymentUpdateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PaymentUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PaymentUpdateRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PaymentUpdateRequest) GetActionById() string {
	if x != nil {
		return x.ActionById
	}
	return ""
}

func (x *PaymentUpdateRequest) GetActionByName() string {
	if x != nil {
		return x.ActionByName
	}
	return ""
}

func (x *PaymentUpdateRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type PaymentReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId    string `protobuf:"bytes,1,opt,name=paymentId,proto3" json:"paymentId"`
	ActionById   string `protobuf:"bytes,2,opt,name=actionById,proto3" json:"actionById"`
	ActionByName string `protobuf:"bytes,3,opt,name=actionByName,proto3" json:"actionByName"`
}

func (x *PaymentReturnRequest) Reset() {
	*x = PaymentReturnRequest{}
	mi := &file_finance_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentReturnRequest) ProtoMessage() {}

func (x *PaymentReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finance_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentReturnRequest.ProtoReflect.Descriptor instead.
func (*PaymentReturnRequest) Descriptor() ([]byte, []int) {
	return file_finance_proto_rawDescGZIP(), []int{24}
}

func (x *PaymentReturnRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PaymentReturnRequest) GetActionById() string {
	if x != nil {
		return x.ActionById
	}
	return ""
}

func (x *PaymentReturnRequest) GetActionByName() string {
	if x != nil {
		return x.ActionByName
	}
	return ""
}

var File_finance_proto protoreflect.FileDescriptor

var file_finance_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x53, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x41, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xdc, 0x02,
	0x0a, 0x12, 0x41, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6, 0x01, 0x0a,
	0x12, 0x41, 0x62, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xa6, 0x02,
	0x0a, 0x12, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41,
	0x62, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x41, 0x62, 0x73, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xee, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44,
	0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x41,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44,
	0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x22, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x62, 0x73, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x62, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75,
	0x6d, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xfe, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x4c, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x66, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x62, 0x73, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x20, 0x41, 0x62, 0x73, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x41, 0x62, 0x73, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x1b, 0x41, 0x62, 0x73, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x11, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x14, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xe6, 0x02, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x41, 0x62, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x62, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe3,
	0x01, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0xca, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x69, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x9a, 0x03, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f,
	0x5a, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_finance_proto_rawDescOnce sync.Once
	file_finance_proto_rawDescData = file_finance_proto_rawDesc
)

func file_finance_proto_rawDescGZIP() []byte {
	file_finance_proto_rawDescOnce.Do(func() {
		file_finance_proto_rawDescData = protoimpl.X.CompressGZIP(file_finance_proto_rawDescData)
	})
	return file_finance_proto_rawDescData
}

var file_finance_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_finance_proto_goTypes = []any{
	(*GetHistoryDiscountRequest)(nil),        // 0: finance.GetHistoryDiscountRequest
	(*GetHistoryDiscountResponse)(nil),       // 1: finance.GetHistoryDiscountResponse
	(*AbsHistoryDiscount)(nil),               // 2: finance.AbsHistoryDiscount
	(*AbsDiscountRequest)(nil),               // 3: finance.AbsDiscountRequest
	(*GetInformationDiscountRequest)(nil),    // 4: finance.GetInformationDiscountRequest
	(*GetInformationDiscountResponse)(nil),   // 5: finance.GetInformationDiscountResponse
	(*AbsStudentDiscount)(nil),               // 6: finance.AbsStudentDiscount
	(*CreateCategoryRequest)(nil),            // 7: finance.CreateCategoryRequest
	(*GetAllCategoryRequest)(nil),            // 8: finance.GetAllCategoryRequest
	(*AbsCategory)(nil),                      // 9: finance.AbsCategory
	(*GetAllExpenseDiagramResponse)(nil),     // 10: finance.GetAllExpenseDiagramResponse
	(*GetAllExpenseDiagramRequest)(nil),      // 11: finance.GetAllExpenseDiagramRequest
	(*GetAllExpenseRequest)(nil),             // 12: finance.GetAllExpenseRequest
	(*GetAllExpenseResponse)(nil),            // 13: finance.GetAllExpenseResponse
	(*GetAllExpenseAbs)(nil),                 // 14: finance.GetAllExpenseAbs
	(*CreateExpenseRequest)(nil),             // 15: finance.CreateExpenseRequest
	(*GetAllPaymentsByMonthRequest)(nil),     // 16: finance.GetAllPaymentsByMonthRequest
	(*GetAllPaymentsByMonthResponse)(nil),    // 17: finance.GetAllPaymentsByMonthResponse
	(*AbsGetAllPaymentsByMonthResponse)(nil), // 18: finance.AbsGetAllPaymentsByMonthResponse
	(*GetMonthlyStatusResponse)(nil),         // 19: finance.GetMonthlyStatusResponse
	(*AbsGetMonthlyStatusResponse)(nil),      // 20: finance.AbsGetMonthlyStatusResponse
	(*GetMonthlyStatusRequest)(nil),          // 21: finance.GetMonthlyStatusRequest
	(*PaymentAddRequest)(nil),                // 22: finance.PaymentAddRequest
	(*PaymentUpdateRequest)(nil),             // 23: finance.PaymentUpdateRequest
	(*PaymentReturnRequest)(nil),             // 24: finance.PaymentReturnRequest
	(*PageRequest)(nil),                      // 25: common.PageRequest
	(*GetUserByIdResponse)(nil),              // 26: user.GetUserByIdResponse
	(*DeleteAbsRequest)(nil),                 // 27: common.DeleteAbsRequest
	(*emptypb.Empty)(nil),                    // 28: google.protobuf.Empty
	(*AbsResponse)(nil),                      // 29: common.AbsResponse
}
var file_finance_proto_depIdxs = []int32{
	2,  // 0: finance.GetHistoryDiscountResponse.discounts:type_name -> finance.AbsHistoryDiscount
	6,  // 1: finance.GetInformationDiscountResponse.discounts:type_name -> finance.AbsStudentDiscount
	9,  // 2: finance.GetAllCategoryRequest.categories:type_name -> finance.AbsCategory
	25, // 3: finance.GetAllExpenseRequest.pageReq:type_name -> common.PageRequest
	14, // 4: finance.GetAllExpenseResponse.expenses:type_name -> finance.GetAllExpenseAbs
	9,  // 5: finance.GetAllExpenseAbs.category:type_name -> finance.AbsCategory
	26, // 6: finance.GetAllExpenseAbs.user:type_name -> user.GetUserByIdResponse
	26, // 7: finance.GetAllExpenseAbs.creator:type_name -> user.GetUserByIdResponse
	18, // 8: finance.GetAllPaymentsByMonthResponse.payments:type_name -> finance.AbsGetAllPaymentsByMonthResponse
	20, // 9: finance.GetMonthlyStatusResponse.monthStatus:type_name -> finance.AbsGetMonthlyStatusResponse
	4,  // 10: finance.DiscountService.GetAllInformationDiscount:input_type -> finance.GetInformationDiscountRequest
	3,  // 11: finance.DiscountService.CreateDiscount:input_type -> finance.AbsDiscountRequest
	3,  // 12: finance.DiscountService.DeleteDiscount:input_type -> finance.AbsDiscountRequest
	0,  // 13: finance.DiscountService.GetHistoryDiscount:input_type -> finance.GetHistoryDiscountRequest
	7,  // 14: finance.CategoryService.CreateCategory:input_type -> finance.CreateCategoryRequest
	27, // 15: finance.CategoryService.DeleteCategory:input_type -> common.DeleteAbsRequest
	28, // 16: finance.CategoryService.GetAllCategory:input_type -> google.protobuf.Empty
	15, // 17: finance.ExpenseService.CreateExpense:input_type -> finance.CreateExpenseRequest
	27, // 18: finance.ExpenseService.DeleteExpense:input_type -> common.DeleteAbsRequest
	12, // 19: finance.ExpenseService.GetAllExpense:input_type -> finance.GetAllExpenseRequest
	11, // 20: finance.ExpenseService.GetAllExpenseDiagram:input_type -> finance.GetAllExpenseDiagramRequest
	22, // 21: finance.PaymentService.PaymentAdd:input_type -> finance.PaymentAddRequest
	24, // 22: finance.PaymentService.PaymentReturn:input_type -> finance.PaymentReturnRequest
	23, // 23: finance.PaymentService.PaymentUpdate:input_type -> finance.PaymentUpdateRequest
	21, // 24: finance.PaymentService.GetMonthlyStatus:input_type -> finance.GetMonthlyStatusRequest
	16, // 25: finance.PaymentService.GetAllPaymentsByMonth:input_type -> finance.GetAllPaymentsByMonthRequest
	5,  // 26: finance.DiscountService.GetAllInformationDiscount:output_type -> finance.GetInformationDiscountResponse
	29, // 27: finance.DiscountService.CreateDiscount:output_type -> common.AbsResponse
	29, // 28: finance.DiscountService.DeleteDiscount:output_type -> common.AbsResponse
	1,  // 29: finance.DiscountService.GetHistoryDiscount:output_type -> finance.GetHistoryDiscountResponse
	29, // 30: finance.CategoryService.CreateCategory:output_type -> common.AbsResponse
	29, // 31: finance.CategoryService.DeleteCategory:output_type -> common.AbsResponse
	8,  // 32: finance.CategoryService.GetAllCategory:output_type -> finance.GetAllCategoryRequest
	29, // 33: finance.ExpenseService.CreateExpense:output_type -> common.AbsResponse
	29, // 34: finance.ExpenseService.DeleteExpense:output_type -> common.AbsResponse
	13, // 35: finance.ExpenseService.GetAllExpense:output_type -> finance.GetAllExpenseResponse
	10, // 36: finance.ExpenseService.GetAllExpenseDiagram:output_type -> finance.GetAllExpenseDiagramResponse
	29, // 37: finance.PaymentService.PaymentAdd:output_type -> common.AbsResponse
	29, // 38: finance.PaymentService.PaymentReturn:output_type -> common.AbsResponse
	29, // 39: finance.PaymentService.PaymentUpdate:output_type -> common.AbsResponse
	19, // 40: finance.PaymentService.GetMonthlyStatus:output_type -> finance.GetMonthlyStatusResponse
	17, // 41: finance.PaymentService.GetAllPaymentsByMonth:output_type -> finance.GetAllPaymentsByMonthResponse
	26, // [26:42] is the sub-list for method output_type
	10, // [10:26] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_finance_proto_init() }
func file_finance_proto_init() {
	if File_finance_proto != nil {
		return
	}
	file_common_proto_init()
	file_user_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_finance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_finance_proto_goTypes,
		DependencyIndexes: file_finance_proto_depIdxs,
		MessageInfos:      file_finance_proto_msgTypes,
	}.Build()
	File_finance_proto = out.File
	file_finance_proto_rawDesc = nil
	file_finance_proto_goTypes = nil
	file_finance_proto_depIdxs = nil
}
