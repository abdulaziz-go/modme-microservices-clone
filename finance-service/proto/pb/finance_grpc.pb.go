// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: finance.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscountService_GetAllInformationDiscount_FullMethodName = "/finance.DiscountService/GetAllInformationDiscount"
	DiscountService_CreateDiscount_FullMethodName            = "/finance.DiscountService/CreateDiscount"
	DiscountService_DeleteDiscount_FullMethodName            = "/finance.DiscountService/DeleteDiscount"
	DiscountService_GetHistoryDiscount_FullMethodName        = "/finance.DiscountService/GetHistoryDiscount"
	DiscountService_GetDiscountByStudentId_FullMethodName    = "/finance.DiscountService/GetDiscountByStudentId"
)

// DiscountServiceClient is the client API for DiscountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// discount service start
type DiscountServiceClient interface {
	GetAllInformationDiscount(ctx context.Context, in *GetInformationDiscountRequest, opts ...grpc.CallOption) (*GetInformationDiscountResponse, error)
	CreateDiscount(ctx context.Context, in *AbsDiscountRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	DeleteDiscount(ctx context.Context, in *AbsDiscountRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetHistoryDiscount(ctx context.Context, in *GetHistoryDiscountRequest, opts ...grpc.CallOption) (*GetHistoryDiscountResponse, error)
	GetDiscountByStudentId(ctx context.Context, in *GetDiscountByStudentIdRequest, opts ...grpc.CallOption) (*GetDiscountByStudentIdResponse, error)
}

type discountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountServiceClient(cc grpc.ClientConnInterface) DiscountServiceClient {
	return &discountServiceClient{cc}
}

func (c *discountServiceClient) GetAllInformationDiscount(ctx context.Context, in *GetInformationDiscountRequest, opts ...grpc.CallOption) (*GetInformationDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInformationDiscountResponse)
	err := c.cc.Invoke(ctx, DiscountService_GetAllInformationDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountServiceClient) CreateDiscount(ctx context.Context, in *AbsDiscountRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, DiscountService_CreateDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountServiceClient) DeleteDiscount(ctx context.Context, in *AbsDiscountRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, DiscountService_DeleteDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountServiceClient) GetHistoryDiscount(ctx context.Context, in *GetHistoryDiscountRequest, opts ...grpc.CallOption) (*GetHistoryDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryDiscountResponse)
	err := c.cc.Invoke(ctx, DiscountService_GetHistoryDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountServiceClient) GetDiscountByStudentId(ctx context.Context, in *GetDiscountByStudentIdRequest, opts ...grpc.CallOption) (*GetDiscountByStudentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscountByStudentIdResponse)
	err := c.cc.Invoke(ctx, DiscountService_GetDiscountByStudentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountServiceServer is the server API for DiscountService service.
// All implementations must embed UnimplementedDiscountServiceServer
// for forward compatibility.
//
// discount service start
type DiscountServiceServer interface {
	GetAllInformationDiscount(context.Context, *GetInformationDiscountRequest) (*GetInformationDiscountResponse, error)
	CreateDiscount(context.Context, *AbsDiscountRequest) (*AbsResponse, error)
	DeleteDiscount(context.Context, *AbsDiscountRequest) (*AbsResponse, error)
	GetHistoryDiscount(context.Context, *GetHistoryDiscountRequest) (*GetHistoryDiscountResponse, error)
	GetDiscountByStudentId(context.Context, *GetDiscountByStudentIdRequest) (*GetDiscountByStudentIdResponse, error)
	mustEmbedUnimplementedDiscountServiceServer()
}

// UnimplementedDiscountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscountServiceServer struct{}

func (UnimplementedDiscountServiceServer) GetAllInformationDiscount(context.Context, *GetInformationDiscountRequest) (*GetInformationDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInformationDiscount not implemented")
}
func (UnimplementedDiscountServiceServer) CreateDiscount(context.Context, *AbsDiscountRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscount not implemented")
}
func (UnimplementedDiscountServiceServer) DeleteDiscount(context.Context, *AbsDiscountRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiscount not implemented")
}
func (UnimplementedDiscountServiceServer) GetHistoryDiscount(context.Context, *GetHistoryDiscountRequest) (*GetHistoryDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryDiscount not implemented")
}
func (UnimplementedDiscountServiceServer) GetDiscountByStudentId(context.Context, *GetDiscountByStudentIdRequest) (*GetDiscountByStudentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountByStudentId not implemented")
}
func (UnimplementedDiscountServiceServer) mustEmbedUnimplementedDiscountServiceServer() {}
func (UnimplementedDiscountServiceServer) testEmbeddedByValue()                         {}

// UnsafeDiscountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountServiceServer will
// result in compilation errors.
type UnsafeDiscountServiceServer interface {
	mustEmbedUnimplementedDiscountServiceServer()
}

func RegisterDiscountServiceServer(s grpc.ServiceRegistrar, srv DiscountServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiscountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscountService_ServiceDesc, srv)
}

func _DiscountService_GetAllInformationDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInformationDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).GetAllInformationDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountService_GetAllInformationDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).GetAllInformationDiscount(ctx, req.(*GetInformationDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountService_CreateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).CreateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountService_CreateDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).CreateDiscount(ctx, req.(*AbsDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountService_DeleteDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).DeleteDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountService_DeleteDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).DeleteDiscount(ctx, req.(*AbsDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountService_GetHistoryDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).GetHistoryDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountService_GetHistoryDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).GetHistoryDiscount(ctx, req.(*GetHistoryDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountService_GetDiscountByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountByStudentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).GetDiscountByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountService_GetDiscountByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).GetDiscountByStudentId(ctx, req.(*GetDiscountByStudentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountService_ServiceDesc is the grpc.ServiceDesc for DiscountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.DiscountService",
	HandlerType: (*DiscountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllInformationDiscount",
			Handler:    _DiscountService_GetAllInformationDiscount_Handler,
		},
		{
			MethodName: "CreateDiscount",
			Handler:    _DiscountService_CreateDiscount_Handler,
		},
		{
			MethodName: "DeleteDiscount",
			Handler:    _DiscountService_DeleteDiscount_Handler,
		},
		{
			MethodName: "GetHistoryDiscount",
			Handler:    _DiscountService_GetHistoryDiscount_Handler,
		},
		{
			MethodName: "GetDiscountByStudentId",
			Handler:    _DiscountService_GetDiscountByStudentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	CategoryService_CreateCategory_FullMethodName = "/finance.CategoryService/CreateCategory"
	CategoryService_DeleteCategory_FullMethodName = "/finance.CategoryService/DeleteCategory"
	CategoryService_GetAllCategory_FullMethodName = "/finance.CategoryService/GetAllCategory"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// category service start
type CategoryServiceClient interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteAbsRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetAllCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCategoryRequest, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, CategoryService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) DeleteCategory(ctx context.Context, in *DeleteAbsRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, CategoryService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetAllCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCategoryRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCategoryRequest)
	err := c.cc.Invoke(ctx, CategoryService_GetAllCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility.
//
// category service start
type CategoryServiceServer interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*AbsResponse, error)
	DeleteCategory(context.Context, *DeleteAbsRequest) (*AbsResponse, error)
	GetAllCategory(context.Context, *emptypb.Empty) (*GetAllCategoryRequest, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryServiceServer struct{}

func (UnimplementedCategoryServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryServiceServer) DeleteCategory(context.Context, *DeleteAbsRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategoryServiceServer) GetAllCategory(context.Context, *emptypb.Empty) (*GetAllCategoryRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategory not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}
func (UnimplementedCategoryServiceServer) testEmbeddedByValue()                         {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).DeleteCategory(ctx, req.(*DeleteAbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetAllCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetAllCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetAllCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetAllCategory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _CategoryService_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _CategoryService_DeleteCategory_Handler,
		},
		{
			MethodName: "GetAllCategory",
			Handler:    _CategoryService_GetAllCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	ExpenseService_CreateExpense_FullMethodName        = "/finance.ExpenseService/CreateExpense"
	ExpenseService_DeleteExpense_FullMethodName        = "/finance.ExpenseService/DeleteExpense"
	ExpenseService_GetAllExpense_FullMethodName        = "/finance.ExpenseService/GetAllExpense"
	ExpenseService_GetAllExpenseDiagram_FullMethodName = "/finance.ExpenseService/GetAllExpenseDiagram"
)

// ExpenseServiceClient is the client API for ExpenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// expense service start
type ExpenseServiceClient interface {
	CreateExpense(ctx context.Context, in *CreateExpenseRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	DeleteExpense(ctx context.Context, in *DeleteAbsRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetAllExpense(ctx context.Context, in *GetAllExpenseRequest, opts ...grpc.CallOption) (*GetAllExpenseResponse, error)
	GetAllExpenseDiagram(ctx context.Context, in *GetAllExpenseDiagramRequest, opts ...grpc.CallOption) (*GetAllExpenseDiagramResponse, error)
}

type expenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseServiceClient(cc grpc.ClientConnInterface) ExpenseServiceClient {
	return &expenseServiceClient{cc}
}

func (c *expenseServiceClient) CreateExpense(ctx context.Context, in *CreateExpenseRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, ExpenseService_CreateExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) DeleteExpense(ctx context.Context, in *DeleteAbsRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, ExpenseService_DeleteExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetAllExpense(ctx context.Context, in *GetAllExpenseRequest, opts ...grpc.CallOption) (*GetAllExpenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllExpenseResponse)
	err := c.cc.Invoke(ctx, ExpenseService_GetAllExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetAllExpenseDiagram(ctx context.Context, in *GetAllExpenseDiagramRequest, opts ...grpc.CallOption) (*GetAllExpenseDiagramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllExpenseDiagramResponse)
	err := c.cc.Invoke(ctx, ExpenseService_GetAllExpenseDiagram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseServiceServer is the server API for ExpenseService service.
// All implementations must embed UnimplementedExpenseServiceServer
// for forward compatibility.
//
// expense service start
type ExpenseServiceServer interface {
	CreateExpense(context.Context, *CreateExpenseRequest) (*AbsResponse, error)
	DeleteExpense(context.Context, *DeleteAbsRequest) (*AbsResponse, error)
	GetAllExpense(context.Context, *GetAllExpenseRequest) (*GetAllExpenseResponse, error)
	GetAllExpenseDiagram(context.Context, *GetAllExpenseDiagramRequest) (*GetAllExpenseDiagramResponse, error)
	mustEmbedUnimplementedExpenseServiceServer()
}

// UnimplementedExpenseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExpenseServiceServer struct{}

func (UnimplementedExpenseServiceServer) CreateExpense(context.Context, *CreateExpenseRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpense not implemented")
}
func (UnimplementedExpenseServiceServer) DeleteExpense(context.Context, *DeleteAbsRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpense not implemented")
}
func (UnimplementedExpenseServiceServer) GetAllExpense(context.Context, *GetAllExpenseRequest) (*GetAllExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExpense not implemented")
}
func (UnimplementedExpenseServiceServer) GetAllExpenseDiagram(context.Context, *GetAllExpenseDiagramRequest) (*GetAllExpenseDiagramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExpenseDiagram not implemented")
}
func (UnimplementedExpenseServiceServer) mustEmbedUnimplementedExpenseServiceServer() {}
func (UnimplementedExpenseServiceServer) testEmbeddedByValue()                        {}

// UnsafeExpenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseServiceServer will
// result in compilation errors.
type UnsafeExpenseServiceServer interface {
	mustEmbedUnimplementedExpenseServiceServer()
}

func RegisterExpenseServiceServer(s grpc.ServiceRegistrar, srv ExpenseServiceServer) {
	// If the following call pancis, it indicates UnimplementedExpenseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExpenseService_ServiceDesc, srv)
}

func _ExpenseService_CreateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).CreateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpenseService_CreateExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).CreateExpense(ctx, req.(*CreateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_DeleteExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpenseService_DeleteExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, req.(*DeleteAbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetAllExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetAllExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpenseService_GetAllExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetAllExpense(ctx, req.(*GetAllExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetAllExpenseDiagram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllExpenseDiagramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetAllExpenseDiagram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpenseService_GetAllExpenseDiagram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetAllExpenseDiagram(ctx, req.(*GetAllExpenseDiagramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseService_ServiceDesc is the grpc.ServiceDesc for ExpenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.ExpenseService",
	HandlerType: (*ExpenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpense",
			Handler:    _ExpenseService_CreateExpense_Handler,
		},
		{
			MethodName: "DeleteExpense",
			Handler:    _ExpenseService_DeleteExpense_Handler,
		},
		{
			MethodName: "GetAllExpense",
			Handler:    _ExpenseService_GetAllExpense_Handler,
		},
		{
			MethodName: "GetAllExpenseDiagram",
			Handler:    _ExpenseService_GetAllExpenseDiagram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	PaymentService_PaymentAdd_FullMethodName                 = "/finance.PaymentService/PaymentAdd"
	PaymentService_PaymentReturn_FullMethodName              = "/finance.PaymentService/PaymentReturn"
	PaymentService_PaymentUpdate_FullMethodName              = "/finance.PaymentService/PaymentUpdate"
	PaymentService_GetMonthlyStatus_FullMethodName           = "/finance.PaymentService/GetMonthlyStatus"
	PaymentService_GetAllPaymentsByMonth_FullMethodName      = "/finance.PaymentService/GetAllPaymentsByMonth"
	PaymentService_GetAllPaymentTakeOff_FullMethodName       = "/finance.PaymentService/GetAllPaymentTakeOff"
	PaymentService_GetAllPaymentTakeOffChart_FullMethodName  = "/finance.PaymentService/GetAllPaymentTakeOffChart"
	PaymentService_GetAllStudentPayments_FullMethodName      = "/finance.PaymentService/GetAllStudentPayments"
	PaymentService_GetAllStudentPaymentsChart_FullMethodName = "/finance.PaymentService/GetAllStudentPaymentsChart"
	PaymentService_GetAllDebtsInformation_FullMethodName     = "/finance.PaymentService/GetAllDebtsInformation"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// payment service start
type PaymentServiceClient interface {
	PaymentAdd(ctx context.Context, in *PaymentAddRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	PaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	PaymentUpdate(ctx context.Context, in *PaymentUpdateRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetMonthlyStatus(ctx context.Context, in *GetMonthlyStatusRequest, opts ...grpc.CallOption) (*GetMonthlyStatusResponse, error)
	GetAllPaymentsByMonth(ctx context.Context, in *GetAllPaymentsByMonthRequest, opts ...grpc.CallOption) (*GetAllPaymentsByMonthResponse, error)
	GetAllPaymentTakeOff(ctx context.Context, in *GetAllPaymentTakeOffRequest, opts ...grpc.CallOption) (*GetAllPaymentTakeOffResponse, error)
	GetAllPaymentTakeOffChart(ctx context.Context, in *GetAllPaymentTakeOffRequest, opts ...grpc.CallOption) (*GetAllPaymentTakeOffChartResponse, error)
	GetAllStudentPayments(ctx context.Context, in *GetAllStudentPaymentsRequest, opts ...grpc.CallOption) (*GetAllStudentPaymentsResponse, error)
	GetAllStudentPaymentsChart(ctx context.Context, in *GetAllStudentPaymentsRequest, opts ...grpc.CallOption) (*GetAllStudentPaymentsChartResponse, error)
	GetAllDebtsInformation(ctx context.Context, in *GetAllDebtsRequest, opts ...grpc.CallOption) (*GetAllDebtsInformationResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) PaymentAdd(ctx context.Context, in *PaymentAddRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, PaymentService_PaymentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, PaymentService_PaymentReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentUpdate(ctx context.Context, in *PaymentUpdateRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, PaymentService_PaymentUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetMonthlyStatus(ctx context.Context, in *GetMonthlyStatusRequest, opts ...grpc.CallOption) (*GetMonthlyStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonthlyStatusResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetMonthlyStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllPaymentsByMonth(ctx context.Context, in *GetAllPaymentsByMonthRequest, opts ...grpc.CallOption) (*GetAllPaymentsByMonthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPaymentsByMonthResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAllPaymentsByMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllPaymentTakeOff(ctx context.Context, in *GetAllPaymentTakeOffRequest, opts ...grpc.CallOption) (*GetAllPaymentTakeOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPaymentTakeOffResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAllPaymentTakeOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllPaymentTakeOffChart(ctx context.Context, in *GetAllPaymentTakeOffRequest, opts ...grpc.CallOption) (*GetAllPaymentTakeOffChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPaymentTakeOffChartResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAllPaymentTakeOffChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllStudentPayments(ctx context.Context, in *GetAllStudentPaymentsRequest, opts ...grpc.CallOption) (*GetAllStudentPaymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStudentPaymentsResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAllStudentPayments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllStudentPaymentsChart(ctx context.Context, in *GetAllStudentPaymentsRequest, opts ...grpc.CallOption) (*GetAllStudentPaymentsChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStudentPaymentsChartResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAllStudentPaymentsChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllDebtsInformation(ctx context.Context, in *GetAllDebtsRequest, opts ...grpc.CallOption) (*GetAllDebtsInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllDebtsInformationResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAllDebtsInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// payment service start
type PaymentServiceServer interface {
	PaymentAdd(context.Context, *PaymentAddRequest) (*AbsResponse, error)
	PaymentReturn(context.Context, *PaymentReturnRequest) (*AbsResponse, error)
	PaymentUpdate(context.Context, *PaymentUpdateRequest) (*AbsResponse, error)
	GetMonthlyStatus(context.Context, *GetMonthlyStatusRequest) (*GetMonthlyStatusResponse, error)
	GetAllPaymentsByMonth(context.Context, *GetAllPaymentsByMonthRequest) (*GetAllPaymentsByMonthResponse, error)
	GetAllPaymentTakeOff(context.Context, *GetAllPaymentTakeOffRequest) (*GetAllPaymentTakeOffResponse, error)
	GetAllPaymentTakeOffChart(context.Context, *GetAllPaymentTakeOffRequest) (*GetAllPaymentTakeOffChartResponse, error)
	GetAllStudentPayments(context.Context, *GetAllStudentPaymentsRequest) (*GetAllStudentPaymentsResponse, error)
	GetAllStudentPaymentsChart(context.Context, *GetAllStudentPaymentsRequest) (*GetAllStudentPaymentsChartResponse, error)
	GetAllDebtsInformation(context.Context, *GetAllDebtsRequest) (*GetAllDebtsInformationResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) PaymentAdd(context.Context, *PaymentAddRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAdd not implemented")
}
func (UnimplementedPaymentServiceServer) PaymentReturn(context.Context, *PaymentReturnRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentReturn not implemented")
}
func (UnimplementedPaymentServiceServer) PaymentUpdate(context.Context, *PaymentUpdateRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentUpdate not implemented")
}
func (UnimplementedPaymentServiceServer) GetMonthlyStatus(context.Context, *GetMonthlyStatusRequest) (*GetMonthlyStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyStatus not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllPaymentsByMonth(context.Context, *GetAllPaymentsByMonthRequest) (*GetAllPaymentsByMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaymentsByMonth not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllPaymentTakeOff(context.Context, *GetAllPaymentTakeOffRequest) (*GetAllPaymentTakeOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaymentTakeOff not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllPaymentTakeOffChart(context.Context, *GetAllPaymentTakeOffRequest) (*GetAllPaymentTakeOffChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaymentTakeOffChart not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllStudentPayments(context.Context, *GetAllStudentPaymentsRequest) (*GetAllStudentPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudentPayments not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllStudentPaymentsChart(context.Context, *GetAllStudentPaymentsRequest) (*GetAllStudentPaymentsChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudentPaymentsChart not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllDebtsInformation(context.Context, *GetAllDebtsRequest) (*GetAllDebtsInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDebtsInformation not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_PaymentAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentAdd(ctx, req.(*PaymentAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentReturn(ctx, req.(*PaymentReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentUpdate(ctx, req.(*PaymentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetMonthlyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetMonthlyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetMonthlyStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetMonthlyStatus(ctx, req.(*GetMonthlyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllPaymentsByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPaymentsByMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllPaymentsByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAllPaymentsByMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllPaymentsByMonth(ctx, req.(*GetAllPaymentsByMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllPaymentTakeOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPaymentTakeOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllPaymentTakeOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAllPaymentTakeOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllPaymentTakeOff(ctx, req.(*GetAllPaymentTakeOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllPaymentTakeOffChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPaymentTakeOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllPaymentTakeOffChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAllPaymentTakeOffChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllPaymentTakeOffChart(ctx, req.(*GetAllPaymentTakeOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllStudentPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudentPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllStudentPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAllStudentPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllStudentPayments(ctx, req.(*GetAllStudentPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllStudentPaymentsChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudentPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllStudentPaymentsChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAllStudentPaymentsChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllStudentPaymentsChart(ctx, req.(*GetAllStudentPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllDebtsInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDebtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllDebtsInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAllDebtsInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllDebtsInformation(ctx, req.(*GetAllDebtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaymentAdd",
			Handler:    _PaymentService_PaymentAdd_Handler,
		},
		{
			MethodName: "PaymentReturn",
			Handler:    _PaymentService_PaymentReturn_Handler,
		},
		{
			MethodName: "PaymentUpdate",
			Handler:    _PaymentService_PaymentUpdate_Handler,
		},
		{
			MethodName: "GetMonthlyStatus",
			Handler:    _PaymentService_GetMonthlyStatus_Handler,
		},
		{
			MethodName: "GetAllPaymentsByMonth",
			Handler:    _PaymentService_GetAllPaymentsByMonth_Handler,
		},
		{
			MethodName: "GetAllPaymentTakeOff",
			Handler:    _PaymentService_GetAllPaymentTakeOff_Handler,
		},
		{
			MethodName: "GetAllPaymentTakeOffChart",
			Handler:    _PaymentService_GetAllPaymentTakeOffChart_Handler,
		},
		{
			MethodName: "GetAllStudentPayments",
			Handler:    _PaymentService_GetAllStudentPayments_Handler,
		},
		{
			MethodName: "GetAllStudentPaymentsChart",
			Handler:    _PaymentService_GetAllStudentPaymentsChart_Handler,
		},
		{
			MethodName: "GetAllDebtsInformation",
			Handler:    _PaymentService_GetAllDebtsInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	TeacherSalaryService_CreateTeacherSalary_FullMethodName         = "/finance.TeacherSalaryService/CreateTeacherSalary"
	TeacherSalaryService_DeleteTeacherSalary_FullMethodName         = "/finance.TeacherSalaryService/DeleteTeacherSalary"
	TeacherSalaryService_GetTeacherSalary_FullMethodName            = "/finance.TeacherSalaryService/GetTeacherSalary"
	TeacherSalaryService_GetTeacherSalaryByTeacherID_FullMethodName = "/finance.TeacherSalaryService/GetTeacherSalaryByTeacherID"
)

// TeacherSalaryServiceClient is the client API for TeacherSalaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// teacher salary service start
type TeacherSalaryServiceClient interface {
	CreateTeacherSalary(ctx context.Context, in *CreateTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	DeleteTeacherSalary(ctx context.Context, in *DeleteTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	GetTeacherSalary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTeachersSalaryRequest, error)
	GetTeacherSalaryByTeacherID(ctx context.Context, in *DeleteTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsGetTeachersSalary, error)
}

type teacherSalaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherSalaryServiceClient(cc grpc.ClientConnInterface) TeacherSalaryServiceClient {
	return &teacherSalaryServiceClient{cc}
}

func (c *teacherSalaryServiceClient) CreateTeacherSalary(ctx context.Context, in *CreateTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, TeacherSalaryService_CreateTeacherSalary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherSalaryServiceClient) DeleteTeacherSalary(ctx context.Context, in *DeleteTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, TeacherSalaryService_DeleteTeacherSalary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherSalaryServiceClient) GetTeacherSalary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTeachersSalaryRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeachersSalaryRequest)
	err := c.cc.Invoke(ctx, TeacherSalaryService_GetTeacherSalary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherSalaryServiceClient) GetTeacherSalaryByTeacherID(ctx context.Context, in *DeleteTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsGetTeachersSalary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsGetTeachersSalary)
	err := c.cc.Invoke(ctx, TeacherSalaryService_GetTeacherSalaryByTeacherID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherSalaryServiceServer is the server API for TeacherSalaryService service.
// All implementations must embed UnimplementedTeacherSalaryServiceServer
// for forward compatibility.
//
// teacher salary service start
type TeacherSalaryServiceServer interface {
	CreateTeacherSalary(context.Context, *CreateTeacherSalaryRequest) (*AbsResponse, error)
	DeleteTeacherSalary(context.Context, *DeleteTeacherSalaryRequest) (*AbsResponse, error)
	GetTeacherSalary(context.Context, *emptypb.Empty) (*GetTeachersSalaryRequest, error)
	GetTeacherSalaryByTeacherID(context.Context, *DeleteTeacherSalaryRequest) (*AbsGetTeachersSalary, error)
	mustEmbedUnimplementedTeacherSalaryServiceServer()
}

// UnimplementedTeacherSalaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeacherSalaryServiceServer struct{}

func (UnimplementedTeacherSalaryServiceServer) CreateTeacherSalary(context.Context, *CreateTeacherSalaryRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacherSalary not implemented")
}
func (UnimplementedTeacherSalaryServiceServer) DeleteTeacherSalary(context.Context, *DeleteTeacherSalaryRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacherSalary not implemented")
}
func (UnimplementedTeacherSalaryServiceServer) GetTeacherSalary(context.Context, *emptypb.Empty) (*GetTeachersSalaryRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherSalary not implemented")
}
func (UnimplementedTeacherSalaryServiceServer) GetTeacherSalaryByTeacherID(context.Context, *DeleteTeacherSalaryRequest) (*AbsGetTeachersSalary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherSalaryByTeacherID not implemented")
}
func (UnimplementedTeacherSalaryServiceServer) mustEmbedUnimplementedTeacherSalaryServiceServer() {}
func (UnimplementedTeacherSalaryServiceServer) testEmbeddedByValue()                              {}

// UnsafeTeacherSalaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherSalaryServiceServer will
// result in compilation errors.
type UnsafeTeacherSalaryServiceServer interface {
	mustEmbedUnimplementedTeacherSalaryServiceServer()
}

func RegisterTeacherSalaryServiceServer(s grpc.ServiceRegistrar, srv TeacherSalaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeacherSalaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeacherSalaryService_ServiceDesc, srv)
}

func _TeacherSalaryService_CreateTeacherSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherSalaryServiceServer).CreateTeacherSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherSalaryService_CreateTeacherSalary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherSalaryServiceServer).CreateTeacherSalary(ctx, req.(*CreateTeacherSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherSalaryService_DeleteTeacherSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherSalaryServiceServer).DeleteTeacherSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherSalaryService_DeleteTeacherSalary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherSalaryServiceServer).DeleteTeacherSalary(ctx, req.(*DeleteTeacherSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherSalaryService_GetTeacherSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherSalaryServiceServer).GetTeacherSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherSalaryService_GetTeacherSalary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherSalaryServiceServer).GetTeacherSalary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherSalaryService_GetTeacherSalaryByTeacherID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherSalaryServiceServer).GetTeacherSalaryByTeacherID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherSalaryService_GetTeacherSalaryByTeacherID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherSalaryServiceServer).GetTeacherSalaryByTeacherID(ctx, req.(*DeleteTeacherSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherSalaryService_ServiceDesc is the grpc.ServiceDesc for TeacherSalaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherSalaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.TeacherSalaryService",
	HandlerType: (*TeacherSalaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeacherSalary",
			Handler:    _TeacherSalaryService_CreateTeacherSalary_Handler,
		},
		{
			MethodName: "DeleteTeacherSalary",
			Handler:    _TeacherSalaryService_DeleteTeacherSalary_Handler,
		},
		{
			MethodName: "GetTeacherSalary",
			Handler:    _TeacherSalaryService_GetTeacherSalary_Handler,
		},
		{
			MethodName: "GetTeacherSalaryByTeacherID",
			Handler:    _TeacherSalaryService_GetTeacherSalaryByTeacherID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}
