// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: education.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudentService_GetStudentById_FullMethodName                  = "/education.StudentService/GetStudentById"
	StudentService_GetStudentsByGroupId_FullMethodName            = "/education.StudentService/GetStudentsByGroupId"
	StudentService_ChangeUserBalanceHistory_FullMethodName        = "/education.StudentService/ChangeUserBalanceHistory"
	StudentService_ChangeUserBalanceHistoryByDebit_FullMethodName = "/education.StudentService/ChangeUserBalanceHistoryByDebit"
	StudentService_CalculateDiscountSumma_FullMethodName          = "/education.StudentService/CalculateDiscountSumma"
)

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// student service start
type StudentServiceClient interface {
	GetStudentById(ctx context.Context, in *NoteStudentByAbsRequest, opts ...grpc.CallOption) (*GetStudentByIdResponse, error)
	GetStudentsByGroupId(ctx context.Context, in *GetStudentsByGroupIdRequest, opts ...grpc.CallOption) (*GetStudentsByGroupIdResponse, error)
	ChangeUserBalanceHistory(ctx context.Context, in *ChangeUserBalanceHistoryRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	ChangeUserBalanceHistoryByDebit(ctx context.Context, in *ChangeUserBalanceHistoryByDebitRequest, opts ...grpc.CallOption) (*AbsResponse, error)
	CalculateDiscountSumma(ctx context.Context, in *CalculateDiscountSummaRequest, opts ...grpc.CallOption) (*CalculateDiscountResponse, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) GetStudentById(ctx context.Context, in *NoteStudentByAbsRequest, opts ...grpc.CallOption) (*GetStudentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentByIdResponse)
	err := c.cc.Invoke(ctx, StudentService_GetStudentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudentsByGroupId(ctx context.Context, in *GetStudentsByGroupIdRequest, opts ...grpc.CallOption) (*GetStudentsByGroupIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentsByGroupIdResponse)
	err := c.cc.Invoke(ctx, StudentService_GetStudentsByGroupId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) ChangeUserBalanceHistory(ctx context.Context, in *ChangeUserBalanceHistoryRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, StudentService_ChangeUserBalanceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) ChangeUserBalanceHistoryByDebit(ctx context.Context, in *ChangeUserBalanceHistoryByDebitRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, StudentService_ChangeUserBalanceHistoryByDebit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) CalculateDiscountSumma(ctx context.Context, in *CalculateDiscountSummaRequest, opts ...grpc.CallOption) (*CalculateDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateDiscountResponse)
	err := c.cc.Invoke(ctx, StudentService_CalculateDiscountSumma_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility.
//
// student service start
type StudentServiceServer interface {
	GetStudentById(context.Context, *NoteStudentByAbsRequest) (*GetStudentByIdResponse, error)
	GetStudentsByGroupId(context.Context, *GetStudentsByGroupIdRequest) (*GetStudentsByGroupIdResponse, error)
	ChangeUserBalanceHistory(context.Context, *ChangeUserBalanceHistoryRequest) (*AbsResponse, error)
	ChangeUserBalanceHistoryByDebit(context.Context, *ChangeUserBalanceHistoryByDebitRequest) (*AbsResponse, error)
	CalculateDiscountSumma(context.Context, *CalculateDiscountSummaRequest) (*CalculateDiscountResponse, error)
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentServiceServer struct{}

func (UnimplementedStudentServiceServer) GetStudentById(context.Context, *NoteStudentByAbsRequest) (*GetStudentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedStudentServiceServer) GetStudentsByGroupId(context.Context, *GetStudentsByGroupIdRequest) (*GetStudentsByGroupIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByGroupId not implemented")
}
func (UnimplementedStudentServiceServer) ChangeUserBalanceHistory(context.Context, *ChangeUserBalanceHistoryRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserBalanceHistory not implemented")
}
func (UnimplementedStudentServiceServer) ChangeUserBalanceHistoryByDebit(context.Context, *ChangeUserBalanceHistoryByDebitRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserBalanceHistoryByDebit not implemented")
}
func (UnimplementedStudentServiceServer) CalculateDiscountSumma(context.Context, *CalculateDiscountSummaRequest) (*CalculateDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDiscountSumma not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}
func (UnimplementedStudentServiceServer) testEmbeddedByValue()                        {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteStudentByAbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_GetStudentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudentById(ctx, req.(*NoteStudentByAbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudentsByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsByGroupIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudentsByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_GetStudentsByGroupId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudentsByGroupId(ctx, req.(*GetStudentsByGroupIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_ChangeUserBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).ChangeUserBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_ChangeUserBalanceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).ChangeUserBalanceHistory(ctx, req.(*ChangeUserBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_ChangeUserBalanceHistoryByDebit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserBalanceHistoryByDebitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).ChangeUserBalanceHistoryByDebit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_ChangeUserBalanceHistoryByDebit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).ChangeUserBalanceHistoryByDebit(ctx, req.(*ChangeUserBalanceHistoryByDebitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_CalculateDiscountSumma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDiscountSummaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).CalculateDiscountSumma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentService_CalculateDiscountSumma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).CalculateDiscountSumma(ctx, req.(*CalculateDiscountSummaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "education.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentById",
			Handler:    _StudentService_GetStudentById_Handler,
		},
		{
			MethodName: "GetStudentsByGroupId",
			Handler:    _StudentService_GetStudentsByGroupId_Handler,
		},
		{
			MethodName: "ChangeUserBalanceHistory",
			Handler:    _StudentService_ChangeUserBalanceHistory_Handler,
		},
		{
			MethodName: "ChangeUserBalanceHistoryByDebit",
			Handler:    _StudentService_ChangeUserBalanceHistoryByDebit_Handler,
		},
		{
			MethodName: "CalculateDiscountSumma",
			Handler:    _StudentService_CalculateDiscountSumma_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "education.proto",
}

const (
	GroupService_GetGroupById_FullMethodName         = "/education.GroupService/GetGroupById"
	GroupService_GetGroupsByStudentId_FullMethodName = "/education.GroupService/GetGroupsByStudentId"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	GetGroupById(ctx context.Context, in *GetGroupByIdRequest, opts ...grpc.CallOption) (*GetGroupAbsResponse, error)
	GetGroupsByStudentId(ctx context.Context, in *StudentIdRequest, opts ...grpc.CallOption) (*GetGroupsByStudentResponse, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) GetGroupById(ctx context.Context, in *GetGroupByIdRequest, opts ...grpc.CallOption) (*GetGroupAbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupAbsResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroupById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupsByStudentId(ctx context.Context, in *StudentIdRequest, opts ...grpc.CallOption) (*GetGroupsByStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupsByStudentResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroupsByStudentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility.
type GroupServiceServer interface {
	GetGroupById(context.Context, *GetGroupByIdRequest) (*GetGroupAbsResponse, error)
	GetGroupsByStudentId(context.Context, *StudentIdRequest) (*GetGroupsByStudentResponse, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupServiceServer struct{}

func (UnimplementedGroupServiceServer) GetGroupById(context.Context, *GetGroupByIdRequest) (*GetGroupAbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupById not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupsByStudentId(context.Context, *StudentIdRequest) (*GetGroupsByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsByStudentId not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}
func (UnimplementedGroupServiceServer) testEmbeddedByValue()                      {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_GetGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupById(ctx, req.(*GetGroupByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupsByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupsByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupsByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupsByStudentId(ctx, req.(*StudentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "education.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupById",
			Handler:    _GroupService_GetGroupById_Handler,
		},
		{
			MethodName: "GetGroupsByStudentId",
			Handler:    _GroupService_GetGroupsByStudentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "education.proto",
}
