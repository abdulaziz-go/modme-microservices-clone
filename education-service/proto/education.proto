syntax = "proto3";

package education;

option go_package = "proto/pb";
import "common.proto";

import "google/protobuf/empty.proto";

// room service start
service RoomService{
  rpc CreateRoom(CreateRoomRequest)returns(common.AbsResponse);
  rpc GetRooms(google.protobuf.Empty)returns(GetUpdateRoomAbs);
  rpc UpdateRoom(AbsRoom)returns(common.AbsResponse);
  rpc DeleteRoom(common.DeleteAbsRequest)returns(common.AbsResponse);
}

message CreateRoomRequest{
  string name = 1;
  int32 capacity = 2;
}

message GetUpdateRoomAbs{
  repeated AbsRoom rooms = 1;
}

message AbsRoom{
  string id = 1;
  int32 capacity = 2;
  string name = 3;
}
// room service end

// course service start
service CourseService{
  rpc CreateCourse(CreateCourseRequest)returns(common.AbsResponse);
  rpc GetCourses(google.protobuf.Empty)returns(GetUpdateCourseAbs);
  rpc GetCourseById(GetCourseByIdRequest)returns(GetCourseByIdResponse);
  rpc UpdateCourse(AbsCourse)returns(common.AbsResponse);
  rpc DeleteCourse(common.DeleteAbsRequest)returns(common.AbsResponse);
}

message CreateCourseRequest{
  string name = 1;
  int32 lessonDuration = 2;
  int32 courseDuration = 3;
  double price = 4;
  string description = 5;
}

message GetUpdateCourseAbs{
  repeated AbsCourse courses = 1;
}

message AbsCourse{
  string id = 6;
  string name = 1;
  int32 lessonDuration = 2;
  int32 courseDuration = 3;
  double price = 4;
  string description = 5;
}

message GetCourseByIdResponse{
  string id = 7;
  string name = 1;
  int32 lessonDuration = 2;
  int32 courseDuration = 3;
  double price = 4;
  string description = 5;
  int32 studentCount = 6;
}

message GetCourseByIdRequest{
  string id = 1;
}
// course service end

// group service start
service GroupService{
  rpc CreateGroup(CreateGroupRequest)returns(common.AbsResponse);
  rpc GetGroups(GetGroupsRequest)returns(GetGroupsResponse);
  rpc GetGroupById(GetGroupByIdRequest)returns(GetGroupAbsResponse);
  rpc UpdateGroup(GetUpdateGroupAbs)returns(common.AbsResponse);
  rpc DeleteGroup(common.DeleteAbsRequest)returns(common.AbsResponse);
}

message CreateGroupRequest{
  string name = 1;
  int32 courseId = 2;
  string teacherId = 3;
  string type = 4;
  repeated string days = 5;
  int32 roomId = 6;
  string lessonStartTime = 7;
  string groupStartDate = 8;
  string groupEndDate = 9;
}

message GetGroupByIdRequest{
  string id = 1;
}

message GetUpdateGroupAbs{
  string id = 10;
  string name = 1;
  int32 courseId = 2;
  string teacherId = 3;
  string type = 4;
  repeated string days = 5;
  int32 roomId = 6;
  string lessonStartTime = 7;
  string groupStartDate = 8;
  string groupEndDate = 9;
}

message GetGroupAbsResponse{
  string id = 1;
  AbsCourse course = 2;
  string teacherName = 3;
  string timeDays = 4;
  AbsRoom room = 5;
  int32 studentCount = 6;
  string name = 7;
  bool isArchived = 8;
  string createdAt = 9;
  string startDate = 10;
  string endDate = 11;
  repeated string days = 12;
}

message GetGroupsResponse{
  repeated GetGroupAbsResponse groups = 1;
  int32 totalPageCount = 2;
}

message GetGroupsRequest{
  bool isArchived = 1;
  common.PageRequest page = 2;
}
// group service end