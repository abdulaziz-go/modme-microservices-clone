// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: education.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyFinance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyId       int32   `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	TariffId        int32   `protobuf:"varint,3,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`
	Comment         string  `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Sum             float32 `protobuf:"fixed32,5,opt,name=sum,proto3" json:"sum,omitempty"`
	EditedValidDate string  `protobuf:"bytes,6,opt,name=edited_valid_date,json=editedValidDate,proto3" json:"edited_valid_date,omitempty"`
	CreatedAt       string  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CompanyFinance) Reset() {
	*x = CompanyFinance{}
	mi := &file_education_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyFinance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyFinance) ProtoMessage() {}

func (x *CompanyFinance) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyFinance.ProtoReflect.Descriptor instead.
func (*CompanyFinance) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyFinance) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyFinance) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyFinance) GetTariffId() int32 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *CompanyFinance) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CompanyFinance) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *CompanyFinance) GetEditedValidDate() string {
	if x != nil {
		return x.EditedValidDate
	}
	return ""
}

func (x *CompanyFinance) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type CompanyFinanceSelf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TariffId      int32   `protobuf:"varint,2,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`
	TariffSum     int32   `protobuf:"varint,3,opt,name=tariff_sum,json=tariffSum,proto3" json:"tariff_sum,omitempty"`
	Comment       string  `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Sum           float32 `protobuf:"fixed32,5,opt,name=sum,proto3" json:"sum,omitempty"`
	EditValidDate string  `protobuf:"bytes,6,opt,name=edit_valid_date,json=editValidDate,proto3" json:"edit_valid_date,omitempty"`
	CreatedAt     string  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CompanyFinanceSelf) Reset() {
	*x = CompanyFinanceSelf{}
	mi := &file_education_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyFinanceSelf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyFinanceSelf) ProtoMessage() {}

func (x *CompanyFinanceSelf) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyFinanceSelf.ProtoReflect.Descriptor instead.
func (*CompanyFinanceSelf) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{1}
}

func (x *CompanyFinanceSelf) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyFinanceSelf) GetTariffId() int32 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *CompanyFinanceSelf) GetTariffSum() int32 {
	if x != nil {
		return x.TariffSum
	}
	return 0
}

func (x *CompanyFinanceSelf) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CompanyFinanceSelf) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *CompanyFinanceSelf) GetEditValidDate() string {
	if x != nil {
		return x.EditValidDate
	}
	return ""
}

func (x *CompanyFinanceSelf) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type CompanyFinanceSelfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count           int32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	SumAmountPeriod float32               `protobuf:"fixed32,2,opt,name=sum_amount_period,json=sumAmountPeriod,proto3" json:"sum_amount_period,omitempty"`
	TariffName      string                `protobuf:"bytes,3,opt,name=tariff_name,json=tariffName,proto3" json:"tariff_name,omitempty"`
	DiscountName    string                `protobuf:"bytes,4,opt,name=discount_name,json=discountName,proto3" json:"discount_name,omitempty"`
	RequiredSum     float32               `protobuf:"fixed32,5,opt,name=required_sum,json=requiredSum,proto3" json:"required_sum,omitempty"`
	Items           []*CompanyFinanceSelf `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CompanyFinanceSelfList) Reset() {
	*x = CompanyFinanceSelfList{}
	mi := &file_education_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyFinanceSelfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyFinanceSelfList) ProtoMessage() {}

func (x *CompanyFinanceSelfList) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyFinanceSelfList.ProtoReflect.Descriptor instead.
func (*CompanyFinanceSelfList) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyFinanceSelfList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CompanyFinanceSelfList) GetSumAmountPeriod() float32 {
	if x != nil {
		return x.SumAmountPeriod
	}
	return 0
}

func (x *CompanyFinanceSelfList) GetTariffName() string {
	if x != nil {
		return x.TariffName
	}
	return ""
}

func (x *CompanyFinanceSelfList) GetDiscountName() string {
	if x != nil {
		return x.DiscountName
	}
	return ""
}

func (x *CompanyFinanceSelfList) GetRequiredSum() float32 {
	if x != nil {
		return x.RequiredSum
	}
	return 0
}

func (x *CompanyFinanceSelfList) GetItems() []*CompanyFinanceSelf {
	if x != nil {
		return x.Items
	}
	return nil
}

type CompanyFinanceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32                    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Items []*CompanyFinanceForList `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CompanyFinanceList) Reset() {
	*x = CompanyFinanceList{}
	mi := &file_education_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyFinanceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyFinanceList) ProtoMessage() {}

func (x *CompanyFinanceList) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyFinanceList.ProtoReflect.Descriptor instead.
func (*CompanyFinanceList) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyFinanceList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CompanyFinanceList) GetItems() []*CompanyFinanceForList {
	if x != nil {
		return x.Items
	}
	return nil
}

type CompanyFinanceForList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyName string  `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	CompanyId   int32   `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	StartFrom   string  `protobuf:"bytes,4,opt,name=start_from,json=startFrom,proto3" json:"start_from,omitempty"`
	FinishedTo  string  `protobuf:"bytes,5,opt,name=finished_to,json=finishedTo,proto3" json:"finished_to,omitempty"`
	TariffId    string  `protobuf:"bytes,6,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`
	TariffName  string  `protobuf:"bytes,7,opt,name=tariff_name,json=tariffName,proto3" json:"tariff_name,omitempty"`
	Sum         float32 `protobuf:"fixed32,8,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *CompanyFinanceForList) Reset() {
	*x = CompanyFinanceForList{}
	mi := &file_education_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyFinanceForList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyFinanceForList) ProtoMessage() {}

func (x *CompanyFinanceForList) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyFinanceForList.ProtoReflect.Descriptor instead.
func (*CompanyFinanceForList) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyFinanceForList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyFinanceForList) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyFinanceForList) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyFinanceForList) GetStartFrom() string {
	if x != nil {
		return x.StartFrom
	}
	return ""
}

func (x *CompanyFinanceForList) GetFinishedTo() string {
	if x != nil {
		return x.FinishedTo
	}
	return ""
}

func (x *CompanyFinanceForList) GetTariffId() string {
	if x != nil {
		return x.TariffId
	}
	return ""
}

func (x *CompanyFinanceForList) GetTariffName() string {
	if x != nil {
		return x.TariffName
	}
	return ""
}

func (x *CompanyFinanceForList) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type UpdateCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AvatarUrl    string `protobuf:"bytes,3,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	StartTime    string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CompanyPhone string `protobuf:"bytes,6,opt,name=companyPhone,proto3" json:"companyPhone,omitempty"`
	Subdomain    string `protobuf:"bytes,7,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	ValidDate    string `protobuf:"bytes,8,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`
	TariffId     int64  `protobuf:"varint,9,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`
	DiscountId   string `protobuf:"bytes,10,opt,name=discount_id,json=discountId,proto3" json:"discount_id,omitempty"`
	IsDemo       bool   `protobuf:"varint,11,opt,name=is_demo,json=isDemo,proto3" json:"is_demo,omitempty"`
}

func (x *UpdateCompanyRequest) Reset() {
	*x = UpdateCompanyRequest{}
	mi := &file_education_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyRequest) ProtoMessage() {}

func (x *UpdateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCompanyRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCompanyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCompanyRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateCompanyRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateCompanyRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateCompanyRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *UpdateCompanyRequest) GetCompanyPhone() string {
	if x != nil {
		return x.CompanyPhone
	}
	return ""
}

func (x *UpdateCompanyRequest) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *UpdateCompanyRequest) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *UpdateCompanyRequest) GetTariffId() int64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *UpdateCompanyRequest) GetDiscountId() string {
	if x != nil {
		return x.DiscountId
	}
	return ""
}

func (x *UpdateCompanyRequest) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

type GetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*GetCompanyResponse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TotalCount int32                 `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *GetAllResponse) Reset() {
	*x = GetAllResponse{}
	mi := &file_education_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResponse) ProtoMessage() {}

func (x *GetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResponse.ProtoReflect.Descriptor instead.
func (*GetAllResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllResponse) GetItems() []*GetCompanyResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetAllResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CreateCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AvatarUrl    string `protobuf:"bytes,3,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	StartTime    string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CompanyPhone string `protobuf:"bytes,6,opt,name=companyPhone,proto3" json:"companyPhone,omitempty"`
	Subdomain    string `protobuf:"bytes,7,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	ValidDate    string `protobuf:"bytes,8,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`
	TariffId     int64  `protobuf:"varint,9,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`
	DiscountId   string `protobuf:"bytes,10,opt,name=discount_id,json=discountId,proto3" json:"discount_id,omitempty"`
	IsDemo       bool   `protobuf:"varint,1,opt,name=is_demo,json=isDemo,proto3" json:"is_demo,omitempty"`
}

func (x *CreateCompanyRequest) Reset() {
	*x = CreateCompanyRequest{}
	mi := &file_education_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyRequest) ProtoMessage() {}

func (x *CreateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCompanyRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateCompanyRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CreateCompanyRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateCompanyRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateCompanyRequest) GetCompanyPhone() string {
	if x != nil {
		return x.CompanyPhone
	}
	return ""
}

func (x *CreateCompanyRequest) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *CreateCompanyRequest) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *CreateCompanyRequest) GetTariffId() int64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *CreateCompanyRequest) GetDiscountId() string {
	if x != nil {
		return x.DiscountId
	}
	return ""
}

func (x *CreateCompanyRequest) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

type GetCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GetCompanyRequest) Reset() {
	*x = GetCompanyRequest{}
	mi := &file_education_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyRequest) ProtoMessage() {}

func (x *GetCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{8}
}

func (x *GetCompanyRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type GetCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title              string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AvatarUrl          string  `protobuf:"bytes,3,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"`
	StartTime          string  `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            string  `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CompanyPhone       string  `protobuf:"bytes,6,opt,name=companyPhone,proto3" json:"companyPhone,omitempty"`
	Subdomain          string  `protobuf:"bytes,7,opt,name=subdomain,proto3" json:"subdomain,omitempty"`
	ValidDate          string  `protobuf:"bytes,8,opt,name=valid_date,json=validDate,proto3" json:"valid_date,omitempty"`
	Tariff             *Tariff `protobuf:"bytes,9,opt,name=tariff,proto3" json:"tariff,omitempty"`
	DiscountId         string  `protobuf:"bytes,10,opt,name=discount_id,json=discountId,proto3" json:"discount_id,omitempty"`
	CreatedAt          string  `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsDemo             bool    `protobuf:"varint,12,opt,name=is_demo,json=isDemo,proto3" json:"is_demo,omitempty"`
	ActiveStudentCount int32   `protobuf:"varint,13,opt,name=active_student_count,json=activeStudentCount,proto3" json:"active_student_count,omitempty"`
}

func (x *GetCompanyResponse) Reset() {
	*x = GetCompanyResponse{}
	mi := &file_education_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyResponse) ProtoMessage() {}

func (x *GetCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{9}
}

func (x *GetCompanyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCompanyResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetCompanyResponse) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GetCompanyResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCompanyResponse) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetCompanyResponse) GetCompanyPhone() string {
	if x != nil {
		return x.CompanyPhone
	}
	return ""
}

func (x *GetCompanyResponse) GetSubdomain() string {
	if x != nil {
		return x.Subdomain
	}
	return ""
}

func (x *GetCompanyResponse) GetValidDate() string {
	if x != nil {
		return x.ValidDate
	}
	return ""
}

func (x *GetCompanyResponse) GetTariff() *Tariff {
	if x != nil {
		return x.Tariff
	}
	return nil
}

func (x *GetCompanyResponse) GetDiscountId() string {
	if x != nil {
		return x.DiscountId
	}
	return ""
}

func (x *GetCompanyResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetCompanyResponse) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *GetCompanyResponse) GetActiveStudentCount() int32 {
	if x != nil {
		return x.ActiveStudentCount
	}
	return 0
}

type Tariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StudentCount int32   `protobuf:"varint,3,opt,name=student_count,json=studentCount,proto3" json:"student_count,omitempty"`
	Sum          float32 `protobuf:"fixed32,4,opt,name=sum,proto3" json:"sum,omitempty"`
	Discounts    string  `protobuf:"bytes,5,opt,name=discounts,proto3" json:"discounts,omitempty"`
	IsDeleted    bool    `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	CreatedAt    string  `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Tariff) Reset() {
	*x = Tariff{}
	mi := &file_education_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tariff) ProtoMessage() {}

func (x *Tariff) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tariff.ProtoReflect.Descriptor instead.
func (*Tariff) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{10}
}

func (x *Tariff) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tariff) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tariff) GetStudentCount() int32 {
	if x != nil {
		return x.StudentCount
	}
	return 0
}

func (x *Tariff) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *Tariff) GetDiscounts() string {
	if x != nil {
		return x.Discounts
	}
	return ""
}

func (x *Tariff) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Tariff) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type TariffList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32     `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Items []*Tariff `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TariffList) Reset() {
	*x = TariffList{}
	mi := &file_education_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TariffList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffList) ProtoMessage() {}

func (x *TariffList) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffList.ProtoReflect.Descriptor instead.
func (*TariffList) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{11}
}

func (x *TariffList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TariffList) GetItems() []*Tariff {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Capacity int32  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *CreateRoomRequest) Reset() {
	*x = CreateRoomRequest{}
	mi := &file_education_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomRequest) ProtoMessage() {}

func (x *CreateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomRequest.ProtoReflect.Descriptor instead.
func (*CreateRoomRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{12}
}

func (x *CreateRoomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRoomRequest) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type GetUpdateRoomAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms []*AbsRoom `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (x *GetUpdateRoomAbs) Reset() {
	*x = GetUpdateRoomAbs{}
	mi := &file_education_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateRoomAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateRoomAbs) ProtoMessage() {}

func (x *GetUpdateRoomAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateRoomAbs.ProtoReflect.Descriptor instead.
func (*GetUpdateRoomAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{13}
}

func (x *GetUpdateRoomAbs) GetRooms() []*AbsRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type AbsRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Capacity int32  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AbsRoom) Reset() {
	*x = AbsRoom{}
	mi := &file_education_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsRoom) ProtoMessage() {}

func (x *AbsRoom) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsRoom.ProtoReflect.Descriptor instead.
func (*AbsRoom) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{14}
}

func (x *AbsRoom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsRoom) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *AbsRoom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LessonDuration int32   `protobuf:"varint,2,opt,name=lessonDuration,proto3" json:"lessonDuration,omitempty"`
	CourseDuration int32   `protobuf:"varint,3,opt,name=courseDuration,proto3" json:"courseDuration,omitempty"`
	Price          float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateCourseRequest) Reset() {
	*x = CreateCourseRequest{}
	mi := &file_education_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCourseRequest) ProtoMessage() {}

func (x *CreateCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCourseRequest.ProtoReflect.Descriptor instead.
func (*CreateCourseRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCourseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCourseRequest) GetLessonDuration() int32 {
	if x != nil {
		return x.LessonDuration
	}
	return 0
}

func (x *CreateCourseRequest) GetCourseDuration() int32 {
	if x != nil {
		return x.CourseDuration
	}
	return 0
}

func (x *CreateCourseRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateCourseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetUpdateCourseAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courses []*AbsCourse `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
}

func (x *GetUpdateCourseAbs) Reset() {
	*x = GetUpdateCourseAbs{}
	mi := &file_education_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateCourseAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateCourseAbs) ProtoMessage() {}

func (x *GetUpdateCourseAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateCourseAbs.ProtoReflect.Descriptor instead.
func (*GetUpdateCourseAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{16}
}

func (x *GetUpdateCourseAbs) GetCourses() []*AbsCourse {
	if x != nil {
		return x.Courses
	}
	return nil
}

type AbsCourse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LessonDuration int32   `protobuf:"varint,2,opt,name=lessonDuration,proto3" json:"lessonDuration,omitempty"`
	CourseDuration int32   `protobuf:"varint,3,opt,name=courseDuration,proto3" json:"courseDuration,omitempty"`
	Price          float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AbsCourse) Reset() {
	*x = AbsCourse{}
	mi := &file_education_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsCourse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsCourse) ProtoMessage() {}

func (x *AbsCourse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsCourse.ProtoReflect.Descriptor instead.
func (*AbsCourse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{17}
}

func (x *AbsCourse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsCourse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsCourse) GetLessonDuration() int32 {
	if x != nil {
		return x.LessonDuration
	}
	return 0
}

func (x *AbsCourse) GetCourseDuration() int32 {
	if x != nil {
		return x.CourseDuration
	}
	return 0
}

func (x *AbsCourse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AbsCourse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetCourseByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LessonDuration int32   `protobuf:"varint,2,opt,name=lessonDuration,proto3" json:"lessonDuration,omitempty"`
	CourseDuration int32   `protobuf:"varint,3,opt,name=courseDuration,proto3" json:"courseDuration,omitempty"`
	Price          float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Description    string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	StudentCount   int32   `protobuf:"varint,6,opt,name=studentCount,proto3" json:"studentCount,omitempty"`
}

func (x *GetCourseByIdResponse) Reset() {
	*x = GetCourseByIdResponse{}
	mi := &file_education_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseByIdResponse) ProtoMessage() {}

func (x *GetCourseByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseByIdResponse.ProtoReflect.Descriptor instead.
func (*GetCourseByIdResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{18}
}

func (x *GetCourseByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCourseByIdResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCourseByIdResponse) GetLessonDuration() int32 {
	if x != nil {
		return x.LessonDuration
	}
	return 0
}

func (x *GetCourseByIdResponse) GetCourseDuration() int32 {
	if x != nil {
		return x.CourseDuration
	}
	return 0
}

func (x *GetCourseByIdResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetCourseByIdResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCourseByIdResponse) GetStudentCount() int32 {
	if x != nil {
		return x.StudentCount
	}
	return 0
}

type GetCourseByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCourseByIdRequest) Reset() {
	*x = GetCourseByIdRequest{}
	mi := &file_education_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseByIdRequest) ProtoMessage() {}

func (x *GetCourseByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCourseByIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{19}
}

func (x *GetCourseByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLeftAfterTrialPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Page string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Size string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetLeftAfterTrialPeriodRequest) Reset() {
	*x = GetLeftAfterTrialPeriodRequest{}
	mi := &file_education_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeftAfterTrialPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeftAfterTrialPeriodRequest) ProtoMessage() {}

func (x *GetLeftAfterTrialPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeftAfterTrialPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetLeftAfterTrialPeriodRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{20}
}

func (x *GetLeftAfterTrialPeriodRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetLeftAfterTrialPeriodRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetLeftAfterTrialPeriodRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GetLeftAfterTrialPeriodRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type GetLeftAfterTrialPeriodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items          []*AbsGetLeftAfter `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TotalItemCount int32              `protobuf:"varint,2,opt,name=totalItemCount,proto3" json:"totalItemCount,omitempty"`
}

func (x *GetLeftAfterTrialPeriodResponse) Reset() {
	*x = GetLeftAfterTrialPeriodResponse{}
	mi := &file_education_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeftAfterTrialPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeftAfterTrialPeriodResponse) ProtoMessage() {}

func (x *GetLeftAfterTrialPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeftAfterTrialPeriodResponse.ProtoReflect.Descriptor instead.
func (*GetLeftAfterTrialPeriodResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{21}
}

func (x *GetLeftAfterTrialPeriodResponse) GetItems() []*AbsGetLeftAfter {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetLeftAfterTrialPeriodResponse) GetTotalItemCount() int32 {
	if x != nil {
		return x.TotalItemCount
	}
	return 0
}

type AbsGetLeftAfter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId      string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	StudentName    string `protobuf:"bytes,2,opt,name=studentName,proto3" json:"studentName,omitempty"`
	StudentPhone   string `protobuf:"bytes,3,opt,name=studentPhone,proto3" json:"studentPhone,omitempty"`
	StudentBalance string `protobuf:"bytes,4,opt,name=studentBalance,proto3" json:"studentBalance,omitempty"`
	GroupId        string `protobuf:"bytes,5,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupName      string `protobuf:"bytes,6,opt,name=groupName,proto3" json:"groupName,omitempty"`
	ReturnMoney    bool   `protobuf:"varint,7,opt,name=returnMoney,proto3" json:"returnMoney,omitempty"`
	CreatedAt      string `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SpecificDate   string `protobuf:"bytes,9,opt,name=specificDate,proto3" json:"specificDate,omitempty"`
}

func (x *AbsGetLeftAfter) Reset() {
	*x = AbsGetLeftAfter{}
	mi := &file_education_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsGetLeftAfter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsGetLeftAfter) ProtoMessage() {}

func (x *AbsGetLeftAfter) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsGetLeftAfter.ProtoReflect.Descriptor instead.
func (*AbsGetLeftAfter) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{22}
}

func (x *AbsGetLeftAfter) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *AbsGetLeftAfter) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *AbsGetLeftAfter) GetStudentPhone() string {
	if x != nil {
		return x.StudentPhone
	}
	return ""
}

func (x *AbsGetLeftAfter) GetStudentBalance() string {
	if x != nil {
		return x.StudentBalance
	}
	return ""
}

func (x *AbsGetLeftAfter) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AbsGetLeftAfter) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AbsGetLeftAfter) GetReturnMoney() bool {
	if x != nil {
		return x.ReturnMoney
	}
	return false
}

func (x *AbsGetLeftAfter) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AbsGetLeftAfter) GetSpecificDate() string {
	if x != nil {
		return x.SpecificDate
	}
	return ""
}

type StudentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
}

func (x *StudentIdRequest) Reset() {
	*x = StudentIdRequest{}
	mi := &file_education_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentIdRequest) ProtoMessage() {}

func (x *StudentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentIdRequest.ProtoReflect.Descriptor instead.
func (*StudentIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{23}
}

func (x *StudentIdRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type GetGroupsByStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*DebtorComment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Groups   []*DebtorGroup   `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetGroupsByStudentResponse) Reset() {
	*x = GetGroupsByStudentResponse{}
	mi := &file_education_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByStudentResponse) ProtoMessage() {}

func (x *GetGroupsByStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByStudentResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsByStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{24}
}

func (x *GetGroupsByStudentResponse) GetComments() []*DebtorComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *GetGroupsByStudentResponse) GetGroups() []*DebtorGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type DebtorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *DebtorGroup) Reset() {
	*x = DebtorGroup{}
	mi := &file_education_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebtorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebtorGroup) ProtoMessage() {}

func (x *DebtorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebtorGroup.ProtoReflect.Descriptor instead.
func (*DebtorGroup) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{25}
}

func (x *DebtorGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *DebtorGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type DebtorComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string `protobuf:"bytes,1,opt,name=commentId,proto3" json:"commentId,omitempty"`
	Comment   string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DebtorComment) Reset() {
	*x = DebtorComment{}
	mi := &file_education_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebtorComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebtorComment) ProtoMessage() {}

func (x *DebtorComment) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebtorComment.ProtoReflect.Descriptor instead.
func (*DebtorComment) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{26}
}

func (x *DebtorComment) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *DebtorComment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetCommonInformationEducationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveStudentCount int32 `protobuf:"varint,1,opt,name=activeStudentCount,proto3" json:"activeStudentCount,omitempty"`
	ActiveGroupCount   int32 `protobuf:"varint,2,opt,name=activeGroupCount,proto3" json:"activeGroupCount,omitempty"`
	LeaveGroupCount    int32 `protobuf:"varint,3,opt,name=leaveGroupCount,proto3" json:"leaveGroupCount,omitempty"`
	DebtorsCount       int32 `protobuf:"varint,4,opt,name=debtorsCount,proto3" json:"debtorsCount,omitempty"`
	EleminatedInTrial  int32 `protobuf:"varint,5,opt,name=eleminatedInTrial,proto3" json:"eleminatedInTrial,omitempty"`
}

func (x *GetCommonInformationEducationResponse) Reset() {
	*x = GetCommonInformationEducationResponse{}
	mi := &file_education_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommonInformationEducationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommonInformationEducationResponse) ProtoMessage() {}

func (x *GetCommonInformationEducationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommonInformationEducationResponse.ProtoReflect.Descriptor instead.
func (*GetCommonInformationEducationResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{27}
}

func (x *GetCommonInformationEducationResponse) GetActiveStudentCount() int32 {
	if x != nil {
		return x.ActiveStudentCount
	}
	return 0
}

func (x *GetCommonInformationEducationResponse) GetActiveGroupCount() int32 {
	if x != nil {
		return x.ActiveGroupCount
	}
	return 0
}

func (x *GetCommonInformationEducationResponse) GetLeaveGroupCount() int32 {
	if x != nil {
		return x.LeaveGroupCount
	}
	return 0
}

func (x *GetCommonInformationEducationResponse) GetDebtorsCount() int32 {
	if x != nil {
		return x.DebtorsCount
	}
	return 0
}

func (x *GetCommonInformationEducationResponse) GetEleminatedInTrial() int32 {
	if x != nil {
		return x.EleminatedInTrial
	}
	return 0
}

type GetGroupsByTeacherIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeacherId  string `protobuf:"bytes,1,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	IsArchived bool   `protobuf:"varint,2,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
}

func (x *GetGroupsByTeacherIdRequest) Reset() {
	*x = GetGroupsByTeacherIdRequest{}
	mi := &file_education_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByTeacherIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByTeacherIdRequest) ProtoMessage() {}

func (x *GetGroupsByTeacherIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByTeacherIdRequest.ProtoReflect.Descriptor instead.
func (*GetGroupsByTeacherIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{28}
}

func (x *GetGroupsByTeacherIdRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *GetGroupsByTeacherIdRequest) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

type GetGroupsByTeacherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GetGroupByTeacherAbs `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetGroupsByTeacherResponse) Reset() {
	*x = GetGroupsByTeacherResponse{}
	mi := &file_education_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByTeacherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByTeacherResponse) ProtoMessage() {}

func (x *GetGroupsByTeacherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByTeacherResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsByTeacherResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{29}
}

func (x *GetGroupsByTeacherResponse) GetGroups() []*GetGroupByTeacherAbs {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetGroupByTeacherAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string        `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name               string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CourseName         string        `protobuf:"bytes,2,opt,name=courseName,proto3" json:"courseName,omitempty"`
	RoomName           string        `protobuf:"bytes,3,opt,name=roomName,proto3" json:"roomName,omitempty"`
	LessonStartTime    string        `protobuf:"bytes,4,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	DayType            string        `protobuf:"bytes,5,opt,name=dayType,proto3" json:"dayType,omitempty"`
	GroupStartAt       string        `protobuf:"bytes,6,opt,name=groupStartAt,proto3" json:"groupStartAt,omitempty"`
	GroupEndAt         string        `protobuf:"bytes,7,opt,name=groupEndAt,proto3" json:"groupEndAt,omitempty"`
	ActiveStudentCount int32         `protobuf:"varint,8,opt,name=activeStudentCount,proto3" json:"activeStudentCount,omitempty"`
	Students           []*AbsStudent `protobuf:"bytes,9,rep,name=students,proto3" json:"students,omitempty"`
}

func (x *GetGroupByTeacherAbs) Reset() {
	*x = GetGroupByTeacherAbs{}
	mi := &file_education_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupByTeacherAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByTeacherAbs) ProtoMessage() {}

func (x *GetGroupByTeacherAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByTeacherAbs.ProtoReflect.Descriptor instead.
func (*GetGroupByTeacherAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{30}
}

func (x *GetGroupByTeacherAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetDayType() string {
	if x != nil {
		return x.DayType
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetGroupStartAt() string {
	if x != nil {
		return x.GroupStartAt
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetGroupEndAt() string {
	if x != nil {
		return x.GroupEndAt
	}
	return ""
}

func (x *GetGroupByTeacherAbs) GetActiveStudentCount() int32 {
	if x != nil {
		return x.ActiveStudentCount
	}
	return 0
}

func (x *GetGroupByTeacherAbs) GetStudents() []*AbsStudent {
	if x != nil {
		return x.Students
	}
	return nil
}

type CreateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CourseId        int32    `protobuf:"varint,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	TeacherId       string   `protobuf:"bytes,3,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	Type            string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Days            []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days,omitempty"`
	RoomId          int32    `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId,omitempty"`
	LessonStartTime string   `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	GroupStartDate  string   `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate,omitempty"`
	GroupEndDate    string   `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate,omitempty"`
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	mi := &file_education_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{31}
}

func (x *CreateGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupRequest) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CreateGroupRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *CreateGroupRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateGroupRequest) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *CreateGroupRequest) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CreateGroupRequest) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *CreateGroupRequest) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *CreateGroupRequest) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

type GetGroupByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ActionRole string `protobuf:"bytes,2,opt,name=actionRole,proto3" json:"actionRole,omitempty"`
	ActionId   string `protobuf:"bytes,3,opt,name=actionId,proto3" json:"actionId,omitempty"`
}

func (x *GetGroupByIdRequest) Reset() {
	*x = GetGroupByIdRequest{}
	mi := &file_education_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByIdRequest) ProtoMessage() {}

func (x *GetGroupByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByIdRequest.ProtoReflect.Descriptor instead.
func (*GetGroupByIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{32}
}

func (x *GetGroupByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupByIdRequest) GetActionRole() string {
	if x != nil {
		return x.ActionRole
	}
	return ""
}

func (x *GetGroupByIdRequest) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type GetUpdateGroupAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CourseId        int32    `protobuf:"varint,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	TeacherId       string   `protobuf:"bytes,3,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	Type            string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Days            []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days,omitempty"`
	RoomId          int32    `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId,omitempty"`
	LessonStartTime string   `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	GroupStartDate  string   `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate,omitempty"`
	GroupEndDate    string   `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate,omitempty"`
}

func (x *GetUpdateGroupAbs) Reset() {
	*x = GetUpdateGroupAbs{}
	mi := &file_education_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpdateGroupAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateGroupAbs) ProtoMessage() {}

func (x *GetUpdateGroupAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateGroupAbs.ProtoReflect.Descriptor instead.
func (*GetUpdateGroupAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{33}
}

func (x *GetUpdateGroupAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *GetUpdateGroupAbs) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetUpdateGroupAbs) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GetUpdateGroupAbs) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GetUpdateGroupAbs) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

type GetGroupsByCourseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GetGroupByCourseAbsResponse `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetGroupsByCourseResponse) Reset() {
	*x = GetGroupsByCourseResponse{}
	mi := &file_education_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsByCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsByCourseResponse) ProtoMessage() {}

func (x *GetGroupsByCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsByCourseResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsByCourseResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{34}
}

func (x *GetGroupsByCourseResponse) GetGroups() []*GetGroupByCourseAbsResponse {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetGroupByCourseAbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TeacherName     string `protobuf:"bytes,2,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	GroupStartDate  string `protobuf:"bytes,3,opt,name=groupStartDate,proto3" json:"groupStartDate,omitempty"`
	GroupEndDate    string `protobuf:"bytes,4,opt,name=groupEndDate,proto3" json:"groupEndDate,omitempty"`
	DateType        string `protobuf:"bytes,5,opt,name=dateType,proto3" json:"dateType,omitempty"`
	LessonStartTime string `protobuf:"bytes,6,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	GroupName       string `protobuf:"bytes,7,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *GetGroupByCourseAbsResponse) Reset() {
	*x = GetGroupByCourseAbsResponse{}
	mi := &file_education_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupByCourseAbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByCourseAbsResponse) ProtoMessage() {}

func (x *GetGroupByCourseAbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByCourseAbsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupByCourseAbsResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{35}
}

func (x *GetGroupByCourseAbsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupByCourseAbsResponse) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type GetGroupAbsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Course          *AbsCourse `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	TeacherName     string     `protobuf:"bytes,3,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	TeacherId       string     `protobuf:"bytes,14,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	LessonStartTime string     `protobuf:"bytes,4,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	Room            *AbsRoom   `protobuf:"bytes,5,opt,name=room,proto3" json:"room,omitempty"`
	StudentCount    int32      `protobuf:"varint,6,opt,name=studentCount,proto3" json:"studentCount,omitempty"`
	Name            string     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	IsArchived      bool       `protobuf:"varint,8,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	CreatedAt       string     `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	StartDate       string     `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate         string     `protobuf:"bytes,11,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Days            []string   `protobuf:"bytes,12,rep,name=days,proto3" json:"days,omitempty"`
	DateType        string     `protobuf:"bytes,13,opt,name=dateType,proto3" json:"dateType,omitempty"`
}

func (x *GetGroupAbsResponse) Reset() {
	*x = GetGroupAbsResponse{}
	mi := &file_education_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupAbsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupAbsResponse) ProtoMessage() {}

func (x *GetGroupAbsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupAbsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupAbsResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{36}
}

func (x *GetGroupAbsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupAbsResponse) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *GetGroupAbsResponse) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetGroupAbsResponse) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *GetGroupAbsResponse) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupAbsResponse) GetRoom() *AbsRoom {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetGroupAbsResponse) GetStudentCount() int32 {
	if x != nil {
		return x.StudentCount
	}
	return 0
}

func (x *GetGroupAbsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupAbsResponse) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetGroupAbsResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetGroupAbsResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetGroupAbsResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetGroupAbsResponse) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetGroupAbsResponse) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

type GetGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups         []*GetGroupAbsResponse `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	TotalPageCount int32                  `protobuf:"varint,2,opt,name=totalPageCount,proto3" json:"totalPageCount,omitempty"`
}

func (x *GetGroupsResponse) Reset() {
	*x = GetGroupsResponse{}
	mi := &file_education_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsResponse) ProtoMessage() {}

func (x *GetGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupsResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{37}
}

func (x *GetGroupsResponse) GetGroups() []*GetGroupAbsResponse {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetGroupsResponse) GetTotalPageCount() int32 {
	if x != nil {
		return x.TotalPageCount
	}
	return 0
}

type GetGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsArchived bool         `protobuf:"varint,1,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	Page       *PageRequest `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetGroupsRequest) Reset() {
	*x = GetGroupsRequest{}
	mi := &file_education_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsRequest) ProtoMessage() {}

func (x *GetGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupsRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{38}
}

func (x *GetGroupsRequest) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetGroupsRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type CalculateTeacherSalaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From      string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To        string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	TeacherId string `protobuf:"bytes,3,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
}

func (x *CalculateTeacherSalaryRequest) Reset() {
	*x = CalculateTeacherSalaryRequest{}
	mi := &file_education_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTeacherSalaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTeacherSalaryRequest) ProtoMessage() {}

func (x *CalculateTeacherSalaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTeacherSalaryRequest.ProtoReflect.Descriptor instead.
func (*CalculateTeacherSalaryRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{39}
}

func (x *CalculateTeacherSalaryRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CalculateTeacherSalaryRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CalculateTeacherSalaryRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

type CalculateTeacherSalaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salaries []*AbsCalculateSalary `protobuf:"bytes,1,rep,name=salaries,proto3" json:"salaries,omitempty"`
}

func (x *CalculateTeacherSalaryResponse) Reset() {
	*x = CalculateTeacherSalaryResponse{}
	mi := &file_education_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTeacherSalaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTeacherSalaryResponse) ProtoMessage() {}

func (x *CalculateTeacherSalaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTeacherSalaryResponse.ProtoReflect.Descriptor instead.
func (*CalculateTeacherSalaryResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{40}
}

func (x *CalculateTeacherSalaryResponse) GetSalaries() []*AbsCalculateSalary {
	if x != nil {
		return x.Salaries
	}
	return nil
}

type AbsCalculateSalary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId                   string           `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupName                 string           `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	CommonLessonCountInPeriod int32            `protobuf:"varint,3,opt,name=commonLessonCountInPeriod,proto3" json:"commonLessonCountInPeriod,omitempty"`
	Salaries                  []*StudentSalary `protobuf:"bytes,4,rep,name=salaries,proto3" json:"salaries,omitempty"`
}

func (x *AbsCalculateSalary) Reset() {
	*x = AbsCalculateSalary{}
	mi := &file_education_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsCalculateSalary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsCalculateSalary) ProtoMessage() {}

func (x *AbsCalculateSalary) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsCalculateSalary.ProtoReflect.Descriptor instead.
func (*AbsCalculateSalary) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{41}
}

func (x *AbsCalculateSalary) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AbsCalculateSalary) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *AbsCalculateSalary) GetCommonLessonCountInPeriod() int32 {
	if x != nil {
		return x.CommonLessonCountInPeriod
	}
	return 0
}

func (x *AbsCalculateSalary) GetSalaries() []*StudentSalary {
	if x != nil {
		return x.Salaries
	}
	return nil
}

type StudentSalary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId                string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	StudentName              string `protobuf:"bytes,2,opt,name=studentName,proto3" json:"studentName,omitempty"`
	PassedLessonCount        int32  `protobuf:"varint,3,opt,name=passedLessonCount,proto3" json:"passedLessonCount,omitempty"`
	CalculatedSalaryInPeriod int32  `protobuf:"varint,4,opt,name=calculatedSalaryInPeriod,proto3" json:"calculatedSalaryInPeriod,omitempty"`
}

func (x *StudentSalary) Reset() {
	*x = StudentSalary{}
	mi := &file_education_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentSalary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentSalary) ProtoMessage() {}

func (x *StudentSalary) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentSalary.ProtoReflect.Descriptor instead.
func (*StudentSalary) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{42}
}

func (x *StudentSalary) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentSalary) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *StudentSalary) GetPassedLessonCount() int32 {
	if x != nil {
		return x.PassedLessonCount
	}
	return 0
}

func (x *StudentSalary) GetCalculatedSalaryInPeriod() int32 {
	if x != nil {
		return x.CalculatedSalaryInPeriod
	}
	return 0
}

type GetAttendanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	From         string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Till         string `protobuf:"bytes,3,opt,name=till,proto3" json:"till,omitempty"`
	WithOutdated bool   `protobuf:"varint,4,opt,name=withOutdated,proto3" json:"withOutdated,omitempty"`
	ActionId     string `protobuf:"bytes,5,opt,name=actionId,proto3" json:"actionId,omitempty"`
	ActionRole   string `protobuf:"bytes,6,opt,name=actionRole,proto3" json:"actionRole,omitempty"`
}

func (x *GetAttendanceRequest) Reset() {
	*x = GetAttendanceRequest{}
	mi := &file_education_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttendanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttendanceRequest) ProtoMessage() {}

func (x *GetAttendanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttendanceRequest.ProtoReflect.Descriptor instead.
func (*GetAttendanceRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{43}
}

func (x *GetAttendanceRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetAttendanceRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetAttendanceRequest) GetTill() string {
	if x != nil {
		return x.Till
	}
	return ""
}

func (x *GetAttendanceRequest) GetWithOutdated() bool {
	if x != nil {
		return x.WithOutdated
	}
	return false
}

func (x *GetAttendanceRequest) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *GetAttendanceRequest) GetActionRole() string {
	if x != nil {
		return x.ActionRole
	}
	return ""
}

type GetAttendanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days     []*Day     `protobuf:"bytes,1,rep,name=days,proto3" json:"days,omitempty"`
	Students []*Student `protobuf:"bytes,2,rep,name=students,proto3" json:"students,omitempty"`
}

func (x *GetAttendanceResponse) Reset() {
	*x = GetAttendanceResponse{}
	mi := &file_education_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttendanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttendanceResponse) ProtoMessage() {}

func (x *GetAttendanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttendanceResponse.ProtoReflect.Descriptor instead.
func (*GetAttendanceResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{44}
}

func (x *GetAttendanceResponse) GetDays() []*Day {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetAttendanceResponse) GetStudents() []*Student {
	if x != nil {
		return x.Students
	}
	return nil
}

type Day struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TransferDate string `protobuf:"bytes,2,opt,name=transferDate,proto3" json:"transferDate,omitempty"`
}

func (x *Day) Reset() {
	*x = Day{}
	mi := &file_education_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Day) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Day) ProtoMessage() {}

func (x *Day) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Day.ProtoReflect.Descriptor instead.
func (*Day) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{45}
}

func (x *Day) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Day) GetTransferDate() string {
	if x != nil {
		return x.TransferDate
	}
	return ""
}

type Student struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	ActivatedAt  string        `protobuf:"bytes,1,opt,name=activatedAt,proto3" json:"activatedAt,omitempty"`
	AddedAt      string        `protobuf:"bytes,2,opt,name=addedAt,proto3" json:"addedAt,omitempty"`
	Attendance   []*Attendance `protobuf:"bytes,3,rep,name=attendance,proto3" json:"attendance,omitempty"`
	Balance      float64       `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt    string        `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	DateOfBirth  string        `protobuf:"bytes,6,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	FreezeDetail *FreezeDetail `protobuf:"bytes,7,opt,name=freezeDetail,proto3" json:"freezeDetail,omitempty"`
	Gender       bool          `protobuf:"varint,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Condition    string        `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
	Name         string        `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Phone        string        `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *Student) Reset() {
	*x = Student{}
	mi := &file_education_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Student) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Student) ProtoMessage() {}

func (x *Student) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Student.ProtoReflect.Descriptor instead.
func (*Student) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{46}
}

func (x *Student) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Student) GetActivatedAt() string {
	if x != nil {
		return x.ActivatedAt
	}
	return ""
}

func (x *Student) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

func (x *Student) GetAttendance() []*Attendance {
	if x != nil {
		return x.Attendance
	}
	return nil
}

func (x *Student) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Student) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Student) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *Student) GetFreezeDetail() *FreezeDetail {
	if x != nil {
		return x.FreezeDetail
	}
	return nil
}

func (x *Student) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *Student) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Student) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Student) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type Attendance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttendDate string `protobuf:"bytes,2,opt,name=attend_date,json=attendDate,proto3" json:"attend_date,omitempty"`
	IsCome     bool   `protobuf:"varint,3,opt,name=isCome,proto3" json:"isCome,omitempty"`
	StudentId  string `protobuf:"bytes,4,opt,name=studentId,proto3" json:"studentId,omitempty"`
	TeacherId  string `protobuf:"bytes,5,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
}

func (x *Attendance) Reset() {
	*x = Attendance{}
	mi := &file_education_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attendance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attendance) ProtoMessage() {}

func (x *Attendance) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attendance.ProtoReflect.Descriptor instead.
func (*Attendance) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{47}
}

func (x *Attendance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attendance) GetAttendDate() string {
	if x != nil {
		return x.AttendDate
	}
	return ""
}

func (x *Attendance) GetIsCome() bool {
	if x != nil {
		return x.IsCome
	}
	return false
}

func (x *Attendance) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *Attendance) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

type FreezeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason   string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	TillDate string `protobuf:"bytes,2,opt,name=till_date,json=tillDate,proto3" json:"till_date,omitempty"`
}

func (x *FreezeDetail) Reset() {
	*x = FreezeDetail{}
	mi := &file_education_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreezeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeDetail) ProtoMessage() {}

func (x *FreezeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeDetail.ProtoReflect.Descriptor instead.
func (*FreezeDetail) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{48}
}

func (x *FreezeDetail) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FreezeDetail) GetTillDate() string {
	if x != nil {
		return x.TillDate
	}
	return ""
}

type SetAttendanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttendDate   string `protobuf:"bytes,1,opt,name=attendDate,proto3" json:"attendDate,omitempty"`
	GroupId      string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Status       int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	StudentId    string `protobuf:"bytes,4,opt,name=studentId,proto3" json:"studentId,omitempty"`
	TeacherId    string `protobuf:"bytes,5,opt,name=teacherId,proto3" json:"teacherId,omitempty"`
	ActionById   string `protobuf:"bytes,6,opt,name=actionById,proto3" json:"actionById,omitempty"`
	ActionByRole string `protobuf:"bytes,7,opt,name=actionByRole,proto3" json:"actionByRole,omitempty"`
}

func (x *SetAttendanceRequest) Reset() {
	*x = SetAttendanceRequest{}
	mi := &file_education_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAttendanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAttendanceRequest) ProtoMessage() {}

func (x *SetAttendanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAttendanceRequest.ProtoReflect.Descriptor instead.
func (*SetAttendanceRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{49}
}

func (x *SetAttendanceRequest) GetAttendDate() string {
	if x != nil {
		return x.AttendDate
	}
	return ""
}

func (x *SetAttendanceRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SetAttendanceRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetAttendanceRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *SetAttendanceRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *SetAttendanceRequest) GetActionById() string {
	if x != nil {
		return x.ActionById
	}
	return ""
}

func (x *SetAttendanceRequest) GetActionByRole() string {
	if x != nil {
		return x.ActionByRole
	}
	return ""
}

type ChangeUserBalanceHistoryByDebitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId     string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	OldDebit      string `protobuf:"bytes,2,opt,name=oldDebit,proto3" json:"oldDebit,omitempty"`
	GivenDate     string `protobuf:"bytes,3,opt,name=givenDate,proto3" json:"givenDate,omitempty"`
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	PaymentType   string `protobuf:"bytes,5,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	CreatedBy     string `protobuf:"bytes,6,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedByName string `protobuf:"bytes,7,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	GroupId       string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
	CurrentDebit  string `protobuf:"bytes,9,opt,name=currentDebit,proto3" json:"currentDebit,omitempty"`
}

func (x *ChangeUserBalanceHistoryByDebitRequest) Reset() {
	*x = ChangeUserBalanceHistoryByDebitRequest{}
	mi := &file_education_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeUserBalanceHistoryByDebitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserBalanceHistoryByDebitRequest) ProtoMessage() {}

func (x *ChangeUserBalanceHistoryByDebitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserBalanceHistoryByDebitRequest.ProtoReflect.Descriptor instead.
func (*ChangeUserBalanceHistoryByDebitRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{50}
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetOldDebit() string {
	if x != nil {
		return x.OldDebit
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetGivenDate() string {
	if x != nil {
		return x.GivenDate
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChangeUserBalanceHistoryByDebitRequest) GetCurrentDebit() string {
	if x != nil {
		return x.CurrentDebit
	}
	return ""
}

type ChangeUserBalanceHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId     string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	Amount        string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	GivenDate     string `protobuf:"bytes,3,opt,name=givenDate,proto3" json:"givenDate,omitempty"`
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	PaymentType   string `protobuf:"bytes,5,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	CreatedBy     string `protobuf:"bytes,6,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedByName string `protobuf:"bytes,7,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	GroupId       string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *ChangeUserBalanceHistoryRequest) Reset() {
	*x = ChangeUserBalanceHistoryRequest{}
	mi := &file_education_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeUserBalanceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserBalanceHistoryRequest) ProtoMessage() {}

func (x *ChangeUserBalanceHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserBalanceHistoryRequest.ProtoReflect.Descriptor instead.
func (*ChangeUserBalanceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{51}
}

func (x *ChangeUserBalanceHistoryRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetGivenDate() string {
	if x != nil {
		return x.GivenDate
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *ChangeUserBalanceHistoryRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type DeleteStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId    string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	ReturnMoney  bool   `protobuf:"varint,2,opt,name=returnMoney,proto3" json:"returnMoney,omitempty"`
	ActionById   string `protobuf:"bytes,3,opt,name=actionById,proto3" json:"actionById,omitempty"`
	ActionByName string `protobuf:"bytes,4,opt,name=actionByName,proto3" json:"actionByName,omitempty"`
}

func (x *DeleteStudentRequest) Reset() {
	*x = DeleteStudentRequest{}
	mi := &file_education_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStudentRequest) ProtoMessage() {}

func (x *DeleteStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStudentRequest.ProtoReflect.Descriptor instead.
func (*DeleteStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *DeleteStudentRequest) GetReturnMoney() bool {
	if x != nil {
		return x.ReturnMoney
	}
	return false
}

func (x *DeleteStudentRequest) GetActionById() string {
	if x != nil {
		return x.ActionById
	}
	return ""
}

func (x *DeleteStudentRequest) GetActionByName() string {
	if x != nil {
		return x.ActionByName
	}
	return ""
}

type GetStudentsByGroupIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Students []*AbsStudent `protobuf:"bytes,1,rep,name=students,proto3" json:"students,omitempty"`
}

func (x *GetStudentsByGroupIdResponse) Reset() {
	*x = GetStudentsByGroupIdResponse{}
	mi := &file_education_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentsByGroupIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentsByGroupIdResponse) ProtoMessage() {}

func (x *GetStudentsByGroupIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentsByGroupIdResponse.ProtoReflect.Descriptor instead.
func (*GetStudentsByGroupIdResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{53}
}

func (x *GetStudentsByGroupIdResponse) GetStudents() []*AbsStudent {
	if x != nil {
		return x.Students
	}
	return nil
}

type GetStudentsByGroupIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	WithOutdated bool   `protobuf:"varint,2,opt,name=withOutdated,proto3" json:"withOutdated,omitempty"`
}

func (x *GetStudentsByGroupIdRequest) Reset() {
	*x = GetStudentsByGroupIdRequest{}
	mi := &file_education_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentsByGroupIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentsByGroupIdRequest) ProtoMessage() {}

func (x *GetStudentsByGroupIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentsByGroupIdRequest.ProtoReflect.Descriptor instead.
func (*GetStudentsByGroupIdRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{54}
}

func (x *GetStudentsByGroupIdRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetStudentsByGroupIdRequest) GetWithOutdated() bool {
	if x != nil {
		return x.WithOutdated
	}
	return false
}

type ChangeConditionStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId      string `protobuf:"bytes,4,opt,name=studentId,proto3" json:"studentId,omitempty"`
	GroupId        string `protobuf:"bytes,5,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Status         string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ReturnTheMoney bool   `protobuf:"varint,2,opt,name=returnTheMoney,proto3" json:"returnTheMoney,omitempty"`
	TillDate       string `protobuf:"bytes,3,opt,name=tillDate,proto3" json:"tillDate,omitempty"`
	ActionById     string `protobuf:"bytes,6,opt,name=actionById,proto3" json:"actionById,omitempty"`
	ActionByName   string `protobuf:"bytes,7,opt,name=actionByName,proto3" json:"actionByName,omitempty"`
}

func (x *ChangeConditionStudentRequest) Reset() {
	*x = ChangeConditionStudentRequest{}
	mi := &file_education_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConditionStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConditionStudentRequest) ProtoMessage() {}

func (x *ChangeConditionStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConditionStudentRequest.ProtoReflect.Descriptor instead.
func (*ChangeConditionStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{55}
}

func (x *ChangeConditionStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetReturnTheMoney() bool {
	if x != nil {
		return x.ReturnTheMoney
	}
	return false
}

func (x *ChangeConditionStudentRequest) GetTillDate() string {
	if x != nil {
		return x.TillDate
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetActionById() string {
	if x != nil {
		return x.ActionById
	}
	return ""
}

func (x *ChangeConditionStudentRequest) GetActionByName() string {
	if x != nil {
		return x.ActionByName
	}
	return ""
}

type TransferLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	GroupId string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *TransferLessonRequest) Reset() {
	*x = TransferLessonRequest{}
	mi := &file_education_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLessonRequest) ProtoMessage() {}

func (x *TransferLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLessonRequest.ProtoReflect.Descriptor instead.
func (*TransferLessonRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{56}
}

func (x *TransferLessonRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferLessonRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferLessonRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetHistoryGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupHistory    []*AbsHistory        `protobuf:"bytes,1,rep,name=groupHistory,proto3" json:"groupHistory,omitempty"`
	StudentsHistory []*AbsStudentHistory `protobuf:"bytes,2,rep,name=studentsHistory,proto3" json:"studentsHistory,omitempty"`
}

func (x *GetHistoryGroupResponse) Reset() {
	*x = GetHistoryGroupResponse{}
	mi := &file_education_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryGroupResponse) ProtoMessage() {}

func (x *GetHistoryGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryGroupResponse.ProtoReflect.Descriptor instead.
func (*GetHistoryGroupResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{57}
}

func (x *GetHistoryGroupResponse) GetGroupHistory() []*AbsHistory {
	if x != nil {
		return x.GroupHistory
	}
	return nil
}

func (x *GetHistoryGroupResponse) GetStudentsHistory() []*AbsStudentHistory {
	if x != nil {
		return x.StudentsHistory
	}
	return nil
}

type GetHistoryStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentHistory    []*AbsHistory        `protobuf:"bytes,1,rep,name=studentHistory,proto3" json:"studentHistory,omitempty"`
	ConditionsHistory []*AbsStudentHistory `protobuf:"bytes,2,rep,name=conditionsHistory,proto3" json:"conditionsHistory,omitempty"`
}

func (x *GetHistoryStudentResponse) Reset() {
	*x = GetHistoryStudentResponse{}
	mi := &file_education_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryStudentResponse) ProtoMessage() {}

func (x *GetHistoryStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryStudentResponse.ProtoReflect.Descriptor instead.
func (*GetHistoryStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{58}
}

func (x *GetHistoryStudentResponse) GetStudentHistory() []*AbsHistory {
	if x != nil {
		return x.StudentHistory
	}
	return nil
}

func (x *GetHistoryStudentResponse) GetConditionsHistory() []*AbsStudentHistory {
	if x != nil {
		return x.ConditionsHistory
	}
	return nil
}

type AbsStudentHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Student          *AbsStudent `protobuf:"bytes,1,opt,name=student,proto3" json:"student,omitempty"`
	Group            *AbsGroup   `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	OldCondition     string      `protobuf:"bytes,3,opt,name=oldCondition,proto3" json:"oldCondition,omitempty"`
	CurrentCondition string      `protobuf:"bytes,6,opt,name=currentCondition,proto3" json:"currentCondition,omitempty"`
	SpecificDate     string      `protobuf:"bytes,4,opt,name=specificDate,proto3" json:"specificDate,omitempty"`
	CreatedAt        string      `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *AbsStudentHistory) Reset() {
	*x = AbsStudentHistory{}
	mi := &file_education_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsStudentHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsStudentHistory) ProtoMessage() {}

func (x *AbsStudentHistory) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsStudentHistory.ProtoReflect.Descriptor instead.
func (*AbsStudentHistory) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{59}
}

func (x *AbsStudentHistory) GetStudent() *AbsStudent {
	if x != nil {
		return x.Student
	}
	return nil
}

func (x *AbsStudentHistory) GetGroup() *AbsGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *AbsStudentHistory) GetOldCondition() string {
	if x != nil {
		return x.OldCondition
	}
	return ""
}

func (x *AbsStudentHistory) GetCurrentCondition() string {
	if x != nil {
		return x.CurrentCondition
	}
	return ""
}

func (x *AbsStudentHistory) GetSpecificDate() string {
	if x != nil {
		return x.SpecificDate
	}
	return ""
}

func (x *AbsStudentHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type AbsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TeacherName        string     `protobuf:"bytes,3,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	CurrentGroupStatus string     `protobuf:"bytes,4,opt,name=currentGroupStatus,proto3" json:"currentGroupStatus,omitempty"`
	GroupStartDate     string     `protobuf:"bytes,5,opt,name=groupStartDate,proto3" json:"groupStartDate,omitempty"`
	GroupEndDate       string     `protobuf:"bytes,6,opt,name=groupEndDate,proto3" json:"groupEndDate,omitempty"`
	LessonStartTime    string     `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	DateType           string     `protobuf:"bytes,8,opt,name=dateType,proto3" json:"dateType,omitempty"`
	Course             *AbsCourse `protobuf:"bytes,9,opt,name=course,proto3" json:"course,omitempty"`
	IsArchived         bool       `protobuf:"varint,10,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
}

func (x *AbsGroup) Reset() {
	*x = AbsGroup{}
	mi := &file_education_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsGroup) ProtoMessage() {}

func (x *AbsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsGroup.ProtoReflect.Descriptor instead.
func (*AbsGroup) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{60}
}

func (x *AbsGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsGroup) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *AbsGroup) GetCurrentGroupStatus() string {
	if x != nil {
		return x.CurrentGroupStatus
	}
	return ""
}

func (x *AbsGroup) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *AbsGroup) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *AbsGroup) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *AbsGroup) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

func (x *AbsGroup) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *AbsGroup) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

type AbsHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EditedField  string `protobuf:"bytes,2,opt,name=editedField,proto3" json:"editedField,omitempty"`
	OldValue     string `protobuf:"bytes,3,opt,name=oldValue,proto3" json:"oldValue,omitempty"`
	CurrentValue string `protobuf:"bytes,4,opt,name=currentValue,proto3" json:"currentValue,omitempty"`
}

func (x *AbsHistory) Reset() {
	*x = AbsHistory{}
	mi := &file_education_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsHistory) ProtoMessage() {}

func (x *AbsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsHistory.ProtoReflect.Descriptor instead.
func (*AbsHistory) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{61}
}

func (x *AbsHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsHistory) GetEditedField() string {
	if x != nil {
		return x.EditedField
	}
	return ""
}

func (x *AbsHistory) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *AbsHistory) GetCurrentValue() string {
	if x != nil {
		return x.CurrentValue
	}
	return ""
}

type SearchStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchStudentRequest) Reset() {
	*x = SearchStudentRequest{}
	mi := &file_education_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStudentRequest) ProtoMessage() {}

func (x *SearchStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStudentRequest.ProtoReflect.Descriptor instead.
func (*SearchStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{62}
}

func (x *SearchStudentRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SearchStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Students []*AbsStudent `protobuf:"bytes,1,rep,name=students,proto3" json:"students,omitempty"`
}

func (x *SearchStudentResponse) Reset() {
	*x = SearchStudentResponse{}
	mi := &file_education_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStudentResponse) ProtoMessage() {}

func (x *SearchStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStudentResponse.ProtoReflect.Descriptor instead.
func (*SearchStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{63}
}

func (x *SearchStudentResponse) GetStudents() []*AbsStudent {
	if x != nil {
		return x.Students
	}
	return nil
}

type AbsStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (x *AbsStudent) Reset() {
	*x = AbsStudent{}
	mi := &file_education_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsStudent) ProtoMessage() {}

func (x *AbsStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsStudent.ProtoReflect.Descriptor instead.
func (*AbsStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{64}
}

func (x *AbsStudent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbsStudent) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type GetAllStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Page      string `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	Size      string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetAllStudentRequest) Reset() {
	*x = GetAllStudentRequest{}
	mi := &file_education_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStudentRequest) ProtoMessage() {}

func (x *GetAllStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStudentRequest.ProtoReflect.Descriptor instead.
func (*GetAllStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{65}
}

func (x *GetAllStudentRequest) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *GetAllStudentRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GetAllStudentRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type GetAllStudentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   []*GetGroupsAbsForStudent `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
	TotalCount int32                     `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *GetAllStudentResponse) Reset() {
	*x = GetAllStudentResponse{}
	mi := &file_education_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStudentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStudentResponse) ProtoMessage() {}

func (x *GetAllStudentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStudentResponse.ProtoReflect.Descriptor instead.
func (*GetAllStudentResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{66}
}

func (x *GetAllStudentResponse) GetResponse() []*GetGroupsAbsForStudent {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetAllStudentResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetGroupsAbsForStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Gender            bool                     `protobuf:"varint,3,opt,name=gender,proto3" json:"gender,omitempty"`
	DateOfBirth       string                   `protobuf:"bytes,4,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	Phone             string                   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Address           string                   `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	PassportId        string                   `protobuf:"bytes,7,opt,name=passportId,proto3" json:"passportId,omitempty"`
	AdditionalContact string                   `protobuf:"bytes,8,opt,name=additionalContact,proto3" json:"additionalContact,omitempty"`
	Balance           float64                  `protobuf:"fixed64,10,opt,name=balance,proto3" json:"balance,omitempty"`
	Condition         string                   `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	TelegramUsername  string                   `protobuf:"bytes,12,opt,name=telegramUsername,proto3" json:"telegramUsername,omitempty"`
	CreatedAt         string                   `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Groups            []*GroupGetAllStudentAbs `protobuf:"bytes,9,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetGroupsAbsForStudent) Reset() {
	*x = GetGroupsAbsForStudent{}
	mi := &file_education_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupsAbsForStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupsAbsForStudent) ProtoMessage() {}

func (x *GetGroupsAbsForStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupsAbsForStudent.ProtoReflect.Descriptor instead.
func (*GetGroupsAbsForStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{67}
}

func (x *GetGroupsAbsForStudent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *GetGroupsAbsForStudent) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetGroupsAbsForStudent) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetGroupsAbsForStudent) GetGroups() []*GroupGetAllStudentAbs {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupGetAllStudentAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	Name               string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Course             *AbsCourse `protobuf:"bytes,2,opt,name=course,proto3" json:"course,omitempty"`
	TeacherName        string     `protobuf:"bytes,3,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	Type               string     `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Days               []string   `protobuf:"bytes,5,rep,name=days,proto3" json:"days,omitempty"`
	RoomId             int32      `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId,omitempty"`
	LessonStartTime    string     `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	GroupStartDate     string     `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate,omitempty"`
	GroupEndDate       string     `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate,omitempty"`
	StudentCondition   string     `protobuf:"bytes,11,opt,name=studentCondition,proto3" json:"studentCondition,omitempty"`
	StudentActivatedAt string     `protobuf:"bytes,12,opt,name=studentActivatedAt,proto3" json:"studentActivatedAt,omitempty"`
}

func (x *GroupGetAllStudentAbs) Reset() {
	*x = GroupGetAllStudentAbs{}
	mi := &file_education_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupGetAllStudentAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGetAllStudentAbs) ProtoMessage() {}

func (x *GroupGetAllStudentAbs) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGetAllStudentAbs.ProtoReflect.Descriptor instead.
func (*GroupGetAllStudentAbs) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{68}
}

func (x *GroupGetAllStudentAbs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *GroupGetAllStudentAbs) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GroupGetAllStudentAbs) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *GroupGetAllStudentAbs) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetStudentCondition() string {
	if x != nil {
		return x.StudentCondition
	}
	return ""
}

func (x *GroupGetAllStudentAbs) GetStudentActivatedAt() string {
	if x != nil {
		return x.StudentActivatedAt
	}
	return ""
}

type CreateStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber       string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DateOfBirth       string `protobuf:"bytes,3,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	Gender            bool   `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	AdditionalContact string `protobuf:"bytes,5,opt,name=additionalContact,proto3" json:"additionalContact,omitempty"`
	Address           string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	PassportId        string `protobuf:"bytes,7,opt,name=passportId,proto3" json:"passportId,omitempty"`
	TelegramUsername  string `protobuf:"bytes,10,opt,name=telegramUsername,proto3" json:"telegramUsername,omitempty"`
	GroupId           string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
	DateFrom          string `protobuf:"bytes,9,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	CreatedBy         string `protobuf:"bytes,11,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *CreateStudentRequest) Reset() {
	*x = CreateStudentRequest{}
	mi := &file_education_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStudentRequest) ProtoMessage() {}

func (x *CreateStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStudentRequest.ProtoReflect.Descriptor instead.
func (*CreateStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{69}
}

func (x *CreateStudentRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateStudentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStudentRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *CreateStudentRequest) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *CreateStudentRequest) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

func (x *CreateStudentRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateStudentRequest) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

func (x *CreateStudentRequest) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *CreateStudentRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateStudentRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *CreateStudentRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type UpdateStudentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId         string `protobuf:"bytes,8,opt,name=studentId,proto3" json:"studentId,omitempty"`
	PhoneNumber       string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DateOfBirth       string `protobuf:"bytes,3,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	Gender            bool   `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	AdditionalContact string `protobuf:"bytes,5,opt,name=additionalContact,proto3" json:"additionalContact,omitempty"`
	Address           string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	PassportId        string `protobuf:"bytes,7,opt,name=passportId,proto3" json:"passportId,omitempty"`
}

func (x *UpdateStudentRequest) Reset() {
	*x = UpdateStudentRequest{}
	mi := &file_education_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStudentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStudentRequest) ProtoMessage() {}

func (x *UpdateStudentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStudentRequest.ProtoReflect.Descriptor instead.
func (*UpdateStudentRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateStudentRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *UpdateStudentRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateStudentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStudentRequest) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *UpdateStudentRequest) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *UpdateStudentRequest) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

func (x *UpdateStudentRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateStudentRequest) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

type AddToGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedDate string   `protobuf:"bytes,1,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	GroupId     string   `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	StudentIds  []string `protobuf:"bytes,3,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	CreatedBy   string   `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *AddToGroupRequest) Reset() {
	*x = AddToGroupRequest{}
	mi := &file_education_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToGroupRequest) ProtoMessage() {}

func (x *AddToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToGroupRequest.ProtoReflect.Descriptor instead.
func (*AddToGroupRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{71}
}

func (x *AddToGroupRequest) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *AddToGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AddToGroupRequest) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

func (x *AddToGroupRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetStudentByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Gender            bool               `protobuf:"varint,3,opt,name=gender,proto3" json:"gender,omitempty"`
	DateOfBirth       string             `protobuf:"bytes,4,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	Phone             string             `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Balance           float64            `protobuf:"fixed64,6,opt,name=balance,proto3" json:"balance,omitempty"`
	CreatedAt         string             `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Groups            []*GetGroupStudent `protobuf:"bytes,8,rep,name=groups,proto3" json:"groups,omitempty"`
	Condition         string             `protobuf:"bytes,9,opt,name=condition,proto3" json:"condition,omitempty"`
	AdditionalContact string             `protobuf:"bytes,10,opt,name=additionalContact,proto3" json:"additionalContact,omitempty"`
}

func (x *GetStudentByIdResponse) Reset() {
	*x = GetStudentByIdResponse{}
	mi := &file_education_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentByIdResponse) ProtoMessage() {}

func (x *GetStudentByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentByIdResponse.ProtoReflect.Descriptor instead.
func (*GetStudentByIdResponse) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{72}
}

func (x *GetStudentByIdResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetStudentByIdResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetStudentByIdResponse) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *GetStudentByIdResponse) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *GetStudentByIdResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetStudentByIdResponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetStudentByIdResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetStudentByIdResponse) GetGroups() []*GetGroupStudent {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetStudentByIdResponse) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *GetStudentByIdResponse) GetAdditionalContact() string {
	if x != nil {
		return x.AdditionalContact
	}
	return ""
}

type NoteStudentByAbsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NoteStudentByAbsRequest) Reset() {
	*x = NoteStudentByAbsRequest{}
	mi := &file_education_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteStudentByAbsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteStudentByAbsRequest) ProtoMessage() {}

func (x *NoteStudentByAbsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteStudentByAbsRequest.ProtoReflect.Descriptor instead.
func (*NoteStudentByAbsRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{73}
}

func (x *NoteStudentByAbsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGroupStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DateType           string     `protobuf:"bytes,3,opt,name=dateType,proto3" json:"dateType,omitempty"`
	Days               []string   `protobuf:"bytes,4,rep,name=days,proto3" json:"days,omitempty"`
	Room               *AbsRoom   `protobuf:"bytes,5,opt,name=room,proto3" json:"room,omitempty"`
	Course             *AbsCourse `protobuf:"bytes,6,opt,name=course,proto3" json:"course,omitempty"`
	LessonStartTime    string     `protobuf:"bytes,7,opt,name=lessonStartTime,proto3" json:"lessonStartTime,omitempty"`
	GroupStartDate     string     `protobuf:"bytes,8,opt,name=groupStartDate,proto3" json:"groupStartDate,omitempty"`
	GroupEndDate       string     `protobuf:"bytes,9,opt,name=groupEndDate,proto3" json:"groupEndDate,omitempty"`
	StudentCondition   string     `protobuf:"bytes,11,opt,name=studentCondition,proto3" json:"studentCondition,omitempty"`
	StudentActivatedAt string     `protobuf:"bytes,12,opt,name=studentActivatedAt,proto3" json:"studentActivatedAt,omitempty"`
	StudentAddedAt     string     `protobuf:"bytes,14,opt,name=studentAddedAt,proto3" json:"studentAddedAt,omitempty"`
	TeacherName        string     `protobuf:"bytes,15,opt,name=teacherName,proto3" json:"teacherName,omitempty"`
	PriceForStudent    float64    `protobuf:"fixed64,13,opt,name=priceForStudent,proto3" json:"priceForStudent,omitempty"`
}

func (x *GetGroupStudent) Reset() {
	*x = GetGroupStudent{}
	mi := &file_education_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupStudent) ProtoMessage() {}

func (x *GetGroupStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupStudent.ProtoReflect.Descriptor instead.
func (*GetGroupStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{74}
}

func (x *GetGroupStudent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGroupStudent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupStudent) GetDateType() string {
	if x != nil {
		return x.DateType
	}
	return ""
}

func (x *GetGroupStudent) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *GetGroupStudent) GetRoom() *AbsRoom {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *GetGroupStudent) GetCourse() *AbsCourse {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *GetGroupStudent) GetLessonStartTime() string {
	if x != nil {
		return x.LessonStartTime
	}
	return ""
}

func (x *GetGroupStudent) GetGroupStartDate() string {
	if x != nil {
		return x.GroupStartDate
	}
	return ""
}

func (x *GetGroupStudent) GetGroupEndDate() string {
	if x != nil {
		return x.GroupEndDate
	}
	return ""
}

func (x *GetGroupStudent) GetStudentCondition() string {
	if x != nil {
		return x.StudentCondition
	}
	return ""
}

func (x *GetGroupStudent) GetStudentActivatedAt() string {
	if x != nil {
		return x.StudentActivatedAt
	}
	return ""
}

func (x *GetGroupStudent) GetStudentAddedAt() string {
	if x != nil {
		return x.StudentAddedAt
	}
	return ""
}

func (x *GetGroupStudent) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

func (x *GetGroupStudent) GetPriceForStudent() float64 {
	if x != nil {
		return x.PriceForStudent
	}
	return 0
}

type GetNotesByStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*AbsNote `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *GetNotesByStudent) Reset() {
	*x = GetNotesByStudent{}
	mi := &file_education_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotesByStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesByStudent) ProtoMessage() {}

func (x *GetNotesByStudent) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesByStudent.ProtoReflect.Descriptor instead.
func (*GetNotesByStudent) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{75}
}

func (x *GetNotesByStudent) GetNotes() []*AbsNote {
	if x != nil {
		return x.Notes
	}
	return nil
}

type AbsNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment   string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *AbsNote) Reset() {
	*x = AbsNote{}
	mi := &file_education_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsNote) ProtoMessage() {}

func (x *AbsNote) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsNote.ProtoReflect.Descriptor instead.
func (*AbsNote) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{76}
}

func (x *AbsNote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbsNote) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AbsNote) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type CreateNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note      string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	StudentId string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
}

func (x *CreateNoteRequest) Reset() {
	*x = CreateNoteRequest{}
	mi := &file_education_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteRequest) ProtoMessage() {}

func (x *CreateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_education_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return file_education_proto_rawDescGZIP(), []int{77}
}

func (x *CreateNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateNoteRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

var File_education_proto protoreflect.FileDescriptor

var file_education_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73,
	0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd3, 0x01,
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x53, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x73, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x62,
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0xca,
	0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x22, 0x65, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x22,
	0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xa7, 0x03, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x52, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x44, 0x65, 0x6d, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4b, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x62, 0x73, 0x12, 0x28,
	0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x49, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0xb7, 0x01,
	0x0a, 0x09, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x66, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x66, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x66, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x0f, 0x41, 0x62, 0x73, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x66, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x30, 0x0a, 0x10, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x45, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x74, 0x6f,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x0d, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x74, 0x6f,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64,
	0x65, 0x62, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x65,
	0x6c, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x5b, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x41, 0x62, 0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xe1, 0x02,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x41, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xa7, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x73,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x61, 0x0a, 0x1d, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x22, 0xc0, 0x01, 0x0a, 0x12, 0x41, 0x62, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a,
	0x08, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x4c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0xb8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12,
	0x3b, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x0a, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x43, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x43, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6c, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0xbf, 0x02, 0x0a, 0x26, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x51, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x68,
	0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x11,
	0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xe0, 0x02, 0x0a, 0x08, 0x41, 0x62, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x7e, 0x0a, 0x0a, 0x41, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x4a, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x0a,
	0x41, 0x62, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x76,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41,
	0x62, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x41, 0x62, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x62,
	0x73, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x15, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x41, 0x62, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xc4, 0x02, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x22, 0x29, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x04, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x51, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x45, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x9a, 0x02, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x19, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x66, 0x22, 0x00, 0x32, 0xae, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd5, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x1a, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x2e, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x1a, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x2e, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x1a, 0x11, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x32,
	0x83, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1c, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x62,
	0x73, 0x12, 0x35, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x12, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52,
	0x6f, 0x6f, 0x6d, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe7, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62,
	0x73, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x62, 0x73, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xe6, 0x06, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1d, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x1b, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x62,
	0x73, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x66,
	0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x29, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x66, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa9, 0x02, 0x0a, 0x11, 0x41, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x22, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x53, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x42, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaf, 0x0b, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x49, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x16,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x2e,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x1f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x31,
	0x2e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_education_proto_rawDescOnce sync.Once
	file_education_proto_rawDescData = file_education_proto_rawDesc
)

func file_education_proto_rawDescGZIP() []byte {
	file_education_proto_rawDescOnce.Do(func() {
		file_education_proto_rawDescData = protoimpl.X.CompressGZIP(file_education_proto_rawDescData)
	})
	return file_education_proto_rawDescData
}

var file_education_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_education_proto_goTypes = []any{
	(*CompanyFinance)(nil),                         // 0: education.CompanyFinance
	(*CompanyFinanceSelf)(nil),                     // 1: education.CompanyFinanceSelf
	(*CompanyFinanceSelfList)(nil),                 // 2: education.CompanyFinanceSelfList
	(*CompanyFinanceList)(nil),                     // 3: education.CompanyFinanceList
	(*CompanyFinanceForList)(nil),                  // 4: education.CompanyFinanceForList
	(*UpdateCompanyRequest)(nil),                   // 5: education.UpdateCompanyRequest
	(*GetAllResponse)(nil),                         // 6: education.GetAllResponse
	(*CreateCompanyRequest)(nil),                   // 7: education.CreateCompanyRequest
	(*GetCompanyRequest)(nil),                      // 8: education.GetCompanyRequest
	(*GetCompanyResponse)(nil),                     // 9: education.GetCompanyResponse
	(*Tariff)(nil),                                 // 10: education.Tariff
	(*TariffList)(nil),                             // 11: education.TariffList
	(*CreateRoomRequest)(nil),                      // 12: education.CreateRoomRequest
	(*GetUpdateRoomAbs)(nil),                       // 13: education.GetUpdateRoomAbs
	(*AbsRoom)(nil),                                // 14: education.AbsRoom
	(*CreateCourseRequest)(nil),                    // 15: education.CreateCourseRequest
	(*GetUpdateCourseAbs)(nil),                     // 16: education.GetUpdateCourseAbs
	(*AbsCourse)(nil),                              // 17: education.AbsCourse
	(*GetCourseByIdResponse)(nil),                  // 18: education.GetCourseByIdResponse
	(*GetCourseByIdRequest)(nil),                   // 19: education.GetCourseByIdRequest
	(*GetLeftAfterTrialPeriodRequest)(nil),         // 20: education.GetLeftAfterTrialPeriodRequest
	(*GetLeftAfterTrialPeriodResponse)(nil),        // 21: education.GetLeftAfterTrialPeriodResponse
	(*AbsGetLeftAfter)(nil),                        // 22: education.AbsGetLeftAfter
	(*StudentIdRequest)(nil),                       // 23: education.StudentIdRequest
	(*GetGroupsByStudentResponse)(nil),             // 24: education.GetGroupsByStudentResponse
	(*DebtorGroup)(nil),                            // 25: education.DebtorGroup
	(*DebtorComment)(nil),                          // 26: education.DebtorComment
	(*GetCommonInformationEducationResponse)(nil),  // 27: education.GetCommonInformationEducationResponse
	(*GetGroupsByTeacherIdRequest)(nil),            // 28: education.GetGroupsByTeacherIdRequest
	(*GetGroupsByTeacherResponse)(nil),             // 29: education.GetGroupsByTeacherResponse
	(*GetGroupByTeacherAbs)(nil),                   // 30: education.GetGroupByTeacherAbs
	(*CreateGroupRequest)(nil),                     // 31: education.CreateGroupRequest
	(*GetGroupByIdRequest)(nil),                    // 32: education.GetGroupByIdRequest
	(*GetUpdateGroupAbs)(nil),                      // 33: education.GetUpdateGroupAbs
	(*GetGroupsByCourseResponse)(nil),              // 34: education.GetGroupsByCourseResponse
	(*GetGroupByCourseAbsResponse)(nil),            // 35: education.GetGroupByCourseAbsResponse
	(*GetGroupAbsResponse)(nil),                    // 36: education.GetGroupAbsResponse
	(*GetGroupsResponse)(nil),                      // 37: education.GetGroupsResponse
	(*GetGroupsRequest)(nil),                       // 38: education.GetGroupsRequest
	(*CalculateTeacherSalaryRequest)(nil),          // 39: education.CalculateTeacherSalaryRequest
	(*CalculateTeacherSalaryResponse)(nil),         // 40: education.CalculateTeacherSalaryResponse
	(*AbsCalculateSalary)(nil),                     // 41: education.AbsCalculateSalary
	(*StudentSalary)(nil),                          // 42: education.StudentSalary
	(*GetAttendanceRequest)(nil),                   // 43: education.GetAttendanceRequest
	(*GetAttendanceResponse)(nil),                  // 44: education.GetAttendanceResponse
	(*Day)(nil),                                    // 45: education.Day
	(*Student)(nil),                                // 46: education.Student
	(*Attendance)(nil),                             // 47: education.Attendance
	(*FreezeDetail)(nil),                           // 48: education.FreezeDetail
	(*SetAttendanceRequest)(nil),                   // 49: education.SetAttendanceRequest
	(*ChangeUserBalanceHistoryByDebitRequest)(nil), // 50: education.ChangeUserBalanceHistoryByDebitRequest
	(*ChangeUserBalanceHistoryRequest)(nil),        // 51: education.ChangeUserBalanceHistoryRequest
	(*DeleteStudentRequest)(nil),                   // 52: education.DeleteStudentRequest
	(*GetStudentsByGroupIdResponse)(nil),           // 53: education.GetStudentsByGroupIdResponse
	(*GetStudentsByGroupIdRequest)(nil),            // 54: education.GetStudentsByGroupIdRequest
	(*ChangeConditionStudentRequest)(nil),          // 55: education.ChangeConditionStudentRequest
	(*TransferLessonRequest)(nil),                  // 56: education.TransferLessonRequest
	(*GetHistoryGroupResponse)(nil),                // 57: education.GetHistoryGroupResponse
	(*GetHistoryStudentResponse)(nil),              // 58: education.GetHistoryStudentResponse
	(*AbsStudentHistory)(nil),                      // 59: education.AbsStudentHistory
	(*AbsGroup)(nil),                               // 60: education.AbsGroup
	(*AbsHistory)(nil),                             // 61: education.AbsHistory
	(*SearchStudentRequest)(nil),                   // 62: education.SearchStudentRequest
	(*SearchStudentResponse)(nil),                  // 63: education.SearchStudentResponse
	(*AbsStudent)(nil),                             // 64: education.AbsStudent
	(*GetAllStudentRequest)(nil),                   // 65: education.GetAllStudentRequest
	(*GetAllStudentResponse)(nil),                  // 66: education.GetAllStudentResponse
	(*GetGroupsAbsForStudent)(nil),                 // 67: education.GetGroupsAbsForStudent
	(*GroupGetAllStudentAbs)(nil),                  // 68: education.GroupGetAllStudentAbs
	(*CreateStudentRequest)(nil),                   // 69: education.CreateStudentRequest
	(*UpdateStudentRequest)(nil),                   // 70: education.UpdateStudentRequest
	(*AddToGroupRequest)(nil),                      // 71: education.AddToGroupRequest
	(*GetStudentByIdResponse)(nil),                 // 72: education.GetStudentByIdResponse
	(*NoteStudentByAbsRequest)(nil),                // 73: education.NoteStudentByAbsRequest
	(*GetGroupStudent)(nil),                        // 74: education.GetGroupStudent
	(*GetNotesByStudent)(nil),                      // 75: education.GetNotesByStudent
	(*AbsNote)(nil),                                // 76: education.AbsNote
	(*CreateNoteRequest)(nil),                      // 77: education.CreateNoteRequest
	(*PageRequest)(nil),                            // 78: common.PageRequest
	(*DeleteAbsRequest)(nil),                       // 79: common.DeleteAbsRequest
	(*emptypb.Empty)(nil),                          // 80: google.protobuf.Empty
	(*AbsResponse)(nil),                            // 81: common.AbsResponse
}
var file_education_proto_depIdxs = []int32{
	1,  // 0: education.CompanyFinanceSelfList.items:type_name -> education.CompanyFinanceSelf
	4,  // 1: education.CompanyFinanceList.items:type_name -> education.CompanyFinanceForList
	9,  // 2: education.GetAllResponse.items:type_name -> education.GetCompanyResponse
	10, // 3: education.GetCompanyResponse.tariff:type_name -> education.Tariff
	10, // 4: education.TariffList.items:type_name -> education.Tariff
	14, // 5: education.GetUpdateRoomAbs.rooms:type_name -> education.AbsRoom
	17, // 6: education.GetUpdateCourseAbs.courses:type_name -> education.AbsCourse
	22, // 7: education.GetLeftAfterTrialPeriodResponse.items:type_name -> education.AbsGetLeftAfter
	26, // 8: education.GetGroupsByStudentResponse.comments:type_name -> education.DebtorComment
	25, // 9: education.GetGroupsByStudentResponse.groups:type_name -> education.DebtorGroup
	30, // 10: education.GetGroupsByTeacherResponse.groups:type_name -> education.GetGroupByTeacherAbs
	64, // 11: education.GetGroupByTeacherAbs.students:type_name -> education.AbsStudent
	35, // 12: education.GetGroupsByCourseResponse.groups:type_name -> education.GetGroupByCourseAbsResponse
	17, // 13: education.GetGroupAbsResponse.course:type_name -> education.AbsCourse
	14, // 14: education.GetGroupAbsResponse.room:type_name -> education.AbsRoom
	36, // 15: education.GetGroupsResponse.groups:type_name -> education.GetGroupAbsResponse
	78, // 16: education.GetGroupsRequest.page:type_name -> common.PageRequest
	41, // 17: education.CalculateTeacherSalaryResponse.salaries:type_name -> education.AbsCalculateSalary
	42, // 18: education.AbsCalculateSalary.salaries:type_name -> education.StudentSalary
	45, // 19: education.GetAttendanceResponse.days:type_name -> education.Day
	46, // 20: education.GetAttendanceResponse.students:type_name -> education.Student
	47, // 21: education.Student.attendance:type_name -> education.Attendance
	48, // 22: education.Student.freezeDetail:type_name -> education.FreezeDetail
	64, // 23: education.GetStudentsByGroupIdResponse.students:type_name -> education.AbsStudent
	61, // 24: education.GetHistoryGroupResponse.groupHistory:type_name -> education.AbsHistory
	59, // 25: education.GetHistoryGroupResponse.studentsHistory:type_name -> education.AbsStudentHistory
	61, // 26: education.GetHistoryStudentResponse.studentHistory:type_name -> education.AbsHistory
	59, // 27: education.GetHistoryStudentResponse.conditionsHistory:type_name -> education.AbsStudentHistory
	64, // 28: education.AbsStudentHistory.student:type_name -> education.AbsStudent
	60, // 29: education.AbsStudentHistory.group:type_name -> education.AbsGroup
	17, // 30: education.AbsGroup.course:type_name -> education.AbsCourse
	64, // 31: education.SearchStudentResponse.students:type_name -> education.AbsStudent
	67, // 32: education.GetAllStudentResponse.response:type_name -> education.GetGroupsAbsForStudent
	68, // 33: education.GetGroupsAbsForStudent.groups:type_name -> education.GroupGetAllStudentAbs
	17, // 34: education.GroupGetAllStudentAbs.course:type_name -> education.AbsCourse
	74, // 35: education.GetStudentByIdResponse.groups:type_name -> education.GetGroupStudent
	14, // 36: education.GetGroupStudent.room:type_name -> education.AbsRoom
	17, // 37: education.GetGroupStudent.course:type_name -> education.AbsCourse
	76, // 38: education.GetNotesByStudent.notes:type_name -> education.AbsNote
	0,  // 39: education.CompanyFinanceService.Create:input_type -> education.CompanyFinance
	79, // 40: education.CompanyFinanceService.Delete:input_type -> common.DeleteAbsRequest
	78, // 41: education.CompanyFinanceService.GetAll:input_type -> common.PageRequest
	78, // 42: education.CompanyFinanceService.GetByCompany:input_type -> common.PageRequest
	8,  // 43: education.CompanyService.GetCompanyBySubdomain:input_type -> education.GetCompanyRequest
	7,  // 44: education.CompanyService.CreateCompany:input_type -> education.CreateCompanyRequest
	78, // 45: education.CompanyService.GetAll:input_type -> common.PageRequest
	5,  // 46: education.CompanyService.UpdateCompany:input_type -> education.UpdateCompanyRequest
	10, // 47: education.TariffService.Create:input_type -> education.Tariff
	10, // 48: education.TariffService.Update:input_type -> education.Tariff
	10, // 49: education.TariffService.Delete:input_type -> education.Tariff
	80, // 50: education.TariffService.Get:input_type -> google.protobuf.Empty
	12, // 51: education.RoomService.CreateRoom:input_type -> education.CreateRoomRequest
	80, // 52: education.RoomService.GetRooms:input_type -> google.protobuf.Empty
	14, // 53: education.RoomService.UpdateRoom:input_type -> education.AbsRoom
	79, // 54: education.RoomService.DeleteRoom:input_type -> common.DeleteAbsRequest
	15, // 55: education.CourseService.CreateCourse:input_type -> education.CreateCourseRequest
	80, // 56: education.CourseService.GetCourses:input_type -> google.protobuf.Empty
	19, // 57: education.CourseService.GetCourseById:input_type -> education.GetCourseByIdRequest
	17, // 58: education.CourseService.UpdateCourse:input_type -> education.AbsCourse
	79, // 59: education.CourseService.DeleteCourse:input_type -> common.DeleteAbsRequest
	31, // 60: education.GroupService.CreateGroup:input_type -> education.CreateGroupRequest
	38, // 61: education.GroupService.GetGroups:input_type -> education.GetGroupsRequest
	32, // 62: education.GroupService.GetGroupById:input_type -> education.GetGroupByIdRequest
	32, // 63: education.GroupService.GetGroupsByCourseId:input_type -> education.GetGroupByIdRequest
	23, // 64: education.GroupService.GetGroupsByStudentId:input_type -> education.StudentIdRequest
	33, // 65: education.GroupService.UpdateGroup:input_type -> education.GetUpdateGroupAbs
	79, // 66: education.GroupService.DeleteGroup:input_type -> common.DeleteAbsRequest
	28, // 67: education.GroupService.GetGroupsByTeacherId:input_type -> education.GetGroupsByTeacherIdRequest
	80, // 68: education.GroupService.GetCommonInformationEducation:input_type -> google.protobuf.Empty
	20, // 69: education.GroupService.GetLeftAfterTrialPeriod:input_type -> education.GetLeftAfterTrialPeriodRequest
	43, // 70: education.AttendanceService.GetAttendance:input_type -> education.GetAttendanceRequest
	49, // 71: education.AttendanceService.SetAttendance:input_type -> education.SetAttendanceRequest
	39, // 72: education.AttendanceService.CalculateTeacherSalaryByAttendance:input_type -> education.CalculateTeacherSalaryRequest
	65, // 73: education.StudentService.GetAllStudent:input_type -> education.GetAllStudentRequest
	69, // 74: education.StudentService.CreateStudent:input_type -> education.CreateStudentRequest
	70, // 75: education.StudentService.UpdateStudent:input_type -> education.UpdateStudentRequest
	52, // 76: education.StudentService.DeleteStudent:input_type -> education.DeleteStudentRequest
	71, // 77: education.StudentService.AddToGroup:input_type -> education.AddToGroupRequest
	73, // 78: education.StudentService.GetStudentById:input_type -> education.NoteStudentByAbsRequest
	73, // 79: education.StudentService.GetNoteByStudent:input_type -> education.NoteStudentByAbsRequest
	77, // 80: education.StudentService.CreateNoteForStudent:input_type -> education.CreateNoteRequest
	73, // 81: education.StudentService.DeleteStudentNote:input_type -> education.NoteStudentByAbsRequest
	62, // 82: education.StudentService.SearchStudent:input_type -> education.SearchStudentRequest
	73, // 83: education.StudentService.GetHistoryGroupById:input_type -> education.NoteStudentByAbsRequest
	73, // 84: education.StudentService.GetHistoryStudentById:input_type -> education.NoteStudentByAbsRequest
	56, // 85: education.StudentService.TransferLessonDate:input_type -> education.TransferLessonRequest
	55, // 86: education.StudentService.ChangeConditionStudent:input_type -> education.ChangeConditionStudentRequest
	54, // 87: education.StudentService.GetStudentsByGroupId:input_type -> education.GetStudentsByGroupIdRequest
	51, // 88: education.StudentService.ChangeUserBalanceHistory:input_type -> education.ChangeUserBalanceHistoryRequest
	50, // 89: education.StudentService.ChangeUserBalanceHistoryByDebit:input_type -> education.ChangeUserBalanceHistoryByDebitRequest
	0,  // 90: education.CompanyFinanceService.Create:output_type -> education.CompanyFinance
	81, // 91: education.CompanyFinanceService.Delete:output_type -> common.AbsResponse
	3,  // 92: education.CompanyFinanceService.GetAll:output_type -> education.CompanyFinanceList
	1,  // 93: education.CompanyFinanceService.GetByCompany:output_type -> education.CompanyFinanceSelf
	9,  // 94: education.CompanyService.GetCompanyBySubdomain:output_type -> education.GetCompanyResponse
	81, // 95: education.CompanyService.CreateCompany:output_type -> common.AbsResponse
	6,  // 96: education.CompanyService.GetAll:output_type -> education.GetAllResponse
	81, // 97: education.CompanyService.UpdateCompany:output_type -> common.AbsResponse
	10, // 98: education.TariffService.Create:output_type -> education.Tariff
	10, // 99: education.TariffService.Update:output_type -> education.Tariff
	10, // 100: education.TariffService.Delete:output_type -> education.Tariff
	11, // 101: education.TariffService.Get:output_type -> education.TariffList
	81, // 102: education.RoomService.CreateRoom:output_type -> common.AbsResponse
	13, // 103: education.RoomService.GetRooms:output_type -> education.GetUpdateRoomAbs
	81, // 104: education.RoomService.UpdateRoom:output_type -> common.AbsResponse
	81, // 105: education.RoomService.DeleteRoom:output_type -> common.AbsResponse
	81, // 106: education.CourseService.CreateCourse:output_type -> common.AbsResponse
	16, // 107: education.CourseService.GetCourses:output_type -> education.GetUpdateCourseAbs
	18, // 108: education.CourseService.GetCourseById:output_type -> education.GetCourseByIdResponse
	81, // 109: education.CourseService.UpdateCourse:output_type -> common.AbsResponse
	81, // 110: education.CourseService.DeleteCourse:output_type -> common.AbsResponse
	81, // 111: education.GroupService.CreateGroup:output_type -> common.AbsResponse
	37, // 112: education.GroupService.GetGroups:output_type -> education.GetGroupsResponse
	36, // 113: education.GroupService.GetGroupById:output_type -> education.GetGroupAbsResponse
	34, // 114: education.GroupService.GetGroupsByCourseId:output_type -> education.GetGroupsByCourseResponse
	24, // 115: education.GroupService.GetGroupsByStudentId:output_type -> education.GetGroupsByStudentResponse
	81, // 116: education.GroupService.UpdateGroup:output_type -> common.AbsResponse
	81, // 117: education.GroupService.DeleteGroup:output_type -> common.AbsResponse
	29, // 118: education.GroupService.GetGroupsByTeacherId:output_type -> education.GetGroupsByTeacherResponse
	27, // 119: education.GroupService.GetCommonInformationEducation:output_type -> education.GetCommonInformationEducationResponse
	21, // 120: education.GroupService.GetLeftAfterTrialPeriod:output_type -> education.GetLeftAfterTrialPeriodResponse
	44, // 121: education.AttendanceService.GetAttendance:output_type -> education.GetAttendanceResponse
	81, // 122: education.AttendanceService.SetAttendance:output_type -> common.AbsResponse
	40, // 123: education.AttendanceService.CalculateTeacherSalaryByAttendance:output_type -> education.CalculateTeacherSalaryResponse
	66, // 124: education.StudentService.GetAllStudent:output_type -> education.GetAllStudentResponse
	81, // 125: education.StudentService.CreateStudent:output_type -> common.AbsResponse
	81, // 126: education.StudentService.UpdateStudent:output_type -> common.AbsResponse
	81, // 127: education.StudentService.DeleteStudent:output_type -> common.AbsResponse
	81, // 128: education.StudentService.AddToGroup:output_type -> common.AbsResponse
	72, // 129: education.StudentService.GetStudentById:output_type -> education.GetStudentByIdResponse
	75, // 130: education.StudentService.GetNoteByStudent:output_type -> education.GetNotesByStudent
	81, // 131: education.StudentService.CreateNoteForStudent:output_type -> common.AbsResponse
	81, // 132: education.StudentService.DeleteStudentNote:output_type -> common.AbsResponse
	63, // 133: education.StudentService.SearchStudent:output_type -> education.SearchStudentResponse
	57, // 134: education.StudentService.GetHistoryGroupById:output_type -> education.GetHistoryGroupResponse
	58, // 135: education.StudentService.GetHistoryStudentById:output_type -> education.GetHistoryStudentResponse
	81, // 136: education.StudentService.TransferLessonDate:output_type -> common.AbsResponse
	81, // 137: education.StudentService.ChangeConditionStudent:output_type -> common.AbsResponse
	53, // 138: education.StudentService.GetStudentsByGroupId:output_type -> education.GetStudentsByGroupIdResponse
	81, // 139: education.StudentService.ChangeUserBalanceHistory:output_type -> common.AbsResponse
	81, // 140: education.StudentService.ChangeUserBalanceHistoryByDebit:output_type -> common.AbsResponse
	90, // [90:141] is the sub-list for method output_type
	39, // [39:90] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_education_proto_init() }
func file_education_proto_init() {
	if File_education_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_education_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_education_proto_goTypes,
		DependencyIndexes: file_education_proto_depIdxs,
		MessageInfos:      file_education_proto_msgTypes,
	}.Build()
	File_education_proto = out.File
	file_education_proto_rawDesc = nil
	file_education_proto_goTypes = nil
	file_education_proto_depIdxs = nil
}
