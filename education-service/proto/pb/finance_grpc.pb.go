// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: finance.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscountService_GetDiscountByStudentId_FullMethodName = "/finance.DiscountService/GetDiscountByStudentId"
)

// DiscountServiceClient is the client API for DiscountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// discount service start
type DiscountServiceClient interface {
	GetDiscountByStudentId(ctx context.Context, in *GetDiscountByStudentIdRequest, opts ...grpc.CallOption) (*GetDiscountByStudentIdResponse, error)
}

type discountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountServiceClient(cc grpc.ClientConnInterface) DiscountServiceClient {
	return &discountServiceClient{cc}
}

func (c *discountServiceClient) GetDiscountByStudentId(ctx context.Context, in *GetDiscountByStudentIdRequest, opts ...grpc.CallOption) (*GetDiscountByStudentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscountByStudentIdResponse)
	err := c.cc.Invoke(ctx, DiscountService_GetDiscountByStudentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountServiceServer is the server API for DiscountService service.
// All implementations must embed UnimplementedDiscountServiceServer
// for forward compatibility.
//
// discount service start
type DiscountServiceServer interface {
	GetDiscountByStudentId(context.Context, *GetDiscountByStudentIdRequest) (*GetDiscountByStudentIdResponse, error)
	mustEmbedUnimplementedDiscountServiceServer()
}

// UnimplementedDiscountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscountServiceServer struct{}

func (UnimplementedDiscountServiceServer) GetDiscountByStudentId(context.Context, *GetDiscountByStudentIdRequest) (*GetDiscountByStudentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountByStudentId not implemented")
}
func (UnimplementedDiscountServiceServer) mustEmbedUnimplementedDiscountServiceServer() {}
func (UnimplementedDiscountServiceServer) testEmbeddedByValue()                         {}

// UnsafeDiscountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountServiceServer will
// result in compilation errors.
type UnsafeDiscountServiceServer interface {
	mustEmbedUnimplementedDiscountServiceServer()
}

func RegisterDiscountServiceServer(s grpc.ServiceRegistrar, srv DiscountServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiscountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscountService_ServiceDesc, srv)
}

func _DiscountService_GetDiscountByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountByStudentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).GetDiscountByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountService_GetDiscountByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).GetDiscountByStudentId(ctx, req.(*GetDiscountByStudentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountService_ServiceDesc is the grpc.ServiceDesc for DiscountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.DiscountService",
	HandlerType: (*DiscountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiscountByStudentId",
			Handler:    _DiscountService_GetDiscountByStudentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	PaymentService_PaymentAdd_FullMethodName = "/finance.PaymentService/PaymentAdd"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// payment service start
type PaymentServiceClient interface {
	PaymentAdd(ctx context.Context, in *PaymentAddRequest, opts ...grpc.CallOption) (*AbsResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) PaymentAdd(ctx context.Context, in *PaymentAddRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, PaymentService_PaymentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// payment service start
type PaymentServiceServer interface {
	PaymentAdd(context.Context, *PaymentAddRequest) (*AbsResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) PaymentAdd(context.Context, *PaymentAddRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAdd not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_PaymentAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentAdd(ctx, req.(*PaymentAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaymentAdd",
			Handler:    _PaymentService_PaymentAdd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	TeacherSalaryService_GetTeacherSalaryByTeacherID_FullMethodName = "/finance.TeacherSalaryService/GetTeacherSalaryByTeacherID"
)

// TeacherSalaryServiceClient is the client API for TeacherSalaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// teacher salary service start
type TeacherSalaryServiceClient interface {
	GetTeacherSalaryByTeacherID(ctx context.Context, in *DeleteTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsGetTeachersSalary, error)
}

type teacherSalaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherSalaryServiceClient(cc grpc.ClientConnInterface) TeacherSalaryServiceClient {
	return &teacherSalaryServiceClient{cc}
}

func (c *teacherSalaryServiceClient) GetTeacherSalaryByTeacherID(ctx context.Context, in *DeleteTeacherSalaryRequest, opts ...grpc.CallOption) (*AbsGetTeachersSalary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbsGetTeachersSalary)
	err := c.cc.Invoke(ctx, TeacherSalaryService_GetTeacherSalaryByTeacherID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherSalaryServiceServer is the server API for TeacherSalaryService service.
// All implementations must embed UnimplementedTeacherSalaryServiceServer
// for forward compatibility.
//
// teacher salary service start
type TeacherSalaryServiceServer interface {
	GetTeacherSalaryByTeacherID(context.Context, *DeleteTeacherSalaryRequest) (*AbsGetTeachersSalary, error)
	mustEmbedUnimplementedTeacherSalaryServiceServer()
}

// UnimplementedTeacherSalaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeacherSalaryServiceServer struct{}

func (UnimplementedTeacherSalaryServiceServer) GetTeacherSalaryByTeacherID(context.Context, *DeleteTeacherSalaryRequest) (*AbsGetTeachersSalary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherSalaryByTeacherID not implemented")
}
func (UnimplementedTeacherSalaryServiceServer) mustEmbedUnimplementedTeacherSalaryServiceServer() {}
func (UnimplementedTeacherSalaryServiceServer) testEmbeddedByValue()                              {}

// UnsafeTeacherSalaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherSalaryServiceServer will
// result in compilation errors.
type UnsafeTeacherSalaryServiceServer interface {
	mustEmbedUnimplementedTeacherSalaryServiceServer()
}

func RegisterTeacherSalaryServiceServer(s grpc.ServiceRegistrar, srv TeacherSalaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeacherSalaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeacherSalaryService_ServiceDesc, srv)
}

func _TeacherSalaryService_GetTeacherSalaryByTeacherID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherSalaryServiceServer).GetTeacherSalaryByTeacherID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherSalaryService_GetTeacherSalaryByTeacherID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherSalaryServiceServer).GetTeacherSalaryByTeacherID(ctx, req.(*DeleteTeacherSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherSalaryService_ServiceDesc is the grpc.ServiceDesc for TeacherSalaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherSalaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.TeacherSalaryService",
	HandlerType: (*TeacherSalaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeacherSalaryByTeacherID",
			Handler:    _TeacherSalaryService_GetTeacherSalaryByTeacherID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}
